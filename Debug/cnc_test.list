
cnc_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c64  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003d24  08003d24  00004d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d90  08003d90  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003d90  08003d90  00004d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d98  08003d98  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d98  08003d98  00004d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d9c  08003d9c  00004d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003da0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08003dac  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003dac  00005144  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c717  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c94  00000000  00000000  0001174b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  000133e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a1  00000000  00000000  00013ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013808  00000000  00000000  00014799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0c3  00000000  00000000  00027fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a674  00000000  00000000  00035064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000af6d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000278c  00000000  00000000  000af71c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000b1ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d0c 	.word	0x08003d0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003d0c 	.word	0x08003d0c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <HAL_TIM_PWM_PulseFinishedCallback>:
volatile uint32_t z_step_count = 0;
volatile uint32_t a_step_count = 0;

/* ISR: Count every pulse on TIM2 Channel 1 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681a      	ldr	r2, [r3, #0]
 8000458:	2380      	movs	r3, #128	@ 0x80
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	429a      	cmp	r2, r3
 800045e:	d108      	bne.n	8000472 <HAL_TIM_PWM_PulseFinishedCallback+0x26>
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	7e1b      	ldrb	r3, [r3, #24]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d104      	bne.n	8000472 <HAL_TIM_PWM_PulseFinishedCallback+0x26>
    {
        x_step_count++;
 8000468:	4b1a      	ldr	r3, [pc, #104]	@ (80004d4 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	4b19      	ldr	r3, [pc, #100]	@ (80004d4 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8000470:	601a      	str	r2, [r3, #0]
    }

    if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	2380      	movs	r3, #128	@ 0x80
 8000478:	05db      	lsls	r3, r3, #23
 800047a:	429a      	cmp	r2, r3
 800047c:	d108      	bne.n	8000490 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	7e1b      	ldrb	r3, [r3, #24]
 8000482:	2b02      	cmp	r3, #2
 8000484:	d104      	bne.n	8000490 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
    {
        y_step_count++;
 8000486:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	1c5a      	adds	r2, r3, #1
 800048c:	4b12      	ldr	r3, [pc, #72]	@ (80004d8 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 800048e:	601a      	str	r2, [r3, #0]
    }

    if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	2380      	movs	r3, #128	@ 0x80
 8000496:	05db      	lsls	r3, r3, #23
 8000498:	429a      	cmp	r2, r3
 800049a:	d108      	bne.n	80004ae <HAL_TIM_PWM_PulseFinishedCallback+0x62>
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	7e1b      	ldrb	r3, [r3, #24]
 80004a0:	2b04      	cmp	r3, #4
 80004a2:	d104      	bne.n	80004ae <HAL_TIM_PWM_PulseFinishedCallback+0x62>
    {
        z_step_count++;
 80004a4:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	1c5a      	adds	r2, r3, #1
 80004aa:	4b0c      	ldr	r3, [pc, #48]	@ (80004dc <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 80004ac:	601a      	str	r2, [r3, #0]
    }

    if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681a      	ldr	r2, [r3, #0]
 80004b2:	2380      	movs	r3, #128	@ 0x80
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	429a      	cmp	r2, r3
 80004b8:	d108      	bne.n	80004cc <HAL_TIM_PWM_PulseFinishedCallback+0x80>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	7e1b      	ldrb	r3, [r3, #24]
 80004be:	2b08      	cmp	r3, #8
 80004c0:	d104      	bne.n	80004cc <HAL_TIM_PWM_PulseFinishedCallback+0x80>
    {
       a_step_count++;
 80004c2:	4b07      	ldr	r3, [pc, #28]	@ (80004e0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	1c5a      	adds	r2, r3, #1
 80004c8:	4b05      	ldr	r3, [pc, #20]	@ (80004e0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 80004ca:	601a      	str	r2, [r3, #0]
    }
}
 80004cc:	46c0      	nop			@ (mov r8, r8)
 80004ce:	46bd      	mov	sp, r7
 80004d0:	b002      	add	sp, #8
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	200000f0 	.word	0x200000f0
 80004d8:	200000f4 	.word	0x200000f4
 80004dc:	200000f8 	.word	0x200000f8
 80004e0:	200000fc 	.word	0x200000fc

080004e4 <move_axis>:

/* Generate N pulses at given frequency */
void move_axis(uint8_t axis, uint32_t steps, uint32_t freq_hz, uint8_t dir)
{
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	0019      	movs	r1, r3
 80004f0:	240f      	movs	r4, #15
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	1c02      	adds	r2, r0, #0
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	230e      	movs	r3, #14
 80004fa:	18fb      	adds	r3, r7, r3
 80004fc:	1c0a      	adds	r2, r1, #0
 80004fe:	701a      	strb	r2, [r3, #0]

    // Configure timer frequency
//    uint32_t timer_clk = HAL_RCC_GetPCLK1Freq();
    uint32_t prescaler = 31; // 1 MHz tick
 8000500:	231f      	movs	r3, #31
 8000502:	617b      	str	r3, [r7, #20]
    uint32_t arr = (1000000 / freq_hz) - 1;
 8000504:	6879      	ldr	r1, [r7, #4]
 8000506:	487c      	ldr	r0, [pc, #496]	@ (80006f8 <move_axis+0x214>)
 8000508:	f7ff fdfe 	bl	8000108 <__udivsi3>
 800050c:	0003      	movs	r3, r0
 800050e:	3b01      	subs	r3, #1
 8000510:	613b      	str	r3, [r7, #16]

    htim2.Instance->PSC = prescaler;
 8000512:	4b7a      	ldr	r3, [pc, #488]	@ (80006fc <move_axis+0x218>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	697a      	ldr	r2, [r7, #20]
 8000518:	629a      	str	r2, [r3, #40]	@ 0x28
    htim2.Instance->ARR = arr;
 800051a:	4b78      	ldr	r3, [pc, #480]	@ (80006fc <move_axis+0x218>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	693a      	ldr	r2, [r7, #16]
 8000520:	62da      	str	r2, [r3, #44]	@ 0x2c
    htim2.Instance->CCR1 = arr / 2;
 8000522:	4b76      	ldr	r3, [pc, #472]	@ (80006fc <move_axis+0x218>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	693a      	ldr	r2, [r7, #16]
 8000528:	0852      	lsrs	r2, r2, #1
 800052a:	635a      	str	r2, [r3, #52]	@ 0x34
    htim2.Instance->CCR2 = arr / 2;
 800052c:	4b73      	ldr	r3, [pc, #460]	@ (80006fc <move_axis+0x218>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	693a      	ldr	r2, [r7, #16]
 8000532:	0852      	lsrs	r2, r2, #1
 8000534:	639a      	str	r2, [r3, #56]	@ 0x38
    htim2.Instance->CCR3 = arr / 2;
 8000536:	4b71      	ldr	r3, [pc, #452]	@ (80006fc <move_axis+0x218>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	693a      	ldr	r2, [r7, #16]
 800053c:	0852      	lsrs	r2, r2, #1
 800053e:	63da      	str	r2, [r3, #60]	@ 0x3c
    htim2.Instance->CCR4 = arr / 2;
 8000540:	4b6e      	ldr	r3, [pc, #440]	@ (80006fc <move_axis+0x218>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	693a      	ldr	r2, [r7, #16]
 8000546:	0852      	lsrs	r2, r2, #1
 8000548:	641a      	str	r2, [r3, #64]	@ 0x40

	switch (axis)
 800054a:	193b      	adds	r3, r7, r4
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b03      	cmp	r3, #3
 8000550:	d100      	bne.n	8000554 <move_axis+0x70>
 8000552:	e085      	b.n	8000660 <move_axis+0x17c>
 8000554:	dd00      	ble.n	8000558 <move_axis+0x74>
 8000556:	e0af      	b.n	80006b8 <move_axis+0x1d4>
 8000558:	2b02      	cmp	r3, #2
 800055a:	d054      	beq.n	8000606 <move_axis+0x122>
 800055c:	dd00      	ble.n	8000560 <move_axis+0x7c>
 800055e:	e0ab      	b.n	80006b8 <move_axis+0x1d4>
 8000560:	2b00      	cmp	r3, #0
 8000562:	d002      	beq.n	800056a <move_axis+0x86>
 8000564:	2b01      	cmp	r3, #1
 8000566:	d021      	beq.n	80005ac <move_axis+0xc8>
 8000568:	e0a6      	b.n	80006b8 <move_axis+0x1d4>
	{
		case X:
			// Set direction
			HAL_GPIO_WritePin(X_DIR_Port, X_DIR_Pin, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800056a:	230e      	movs	r3, #14
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	1e5a      	subs	r2, r3, #1
 8000572:	4193      	sbcs	r3, r2
 8000574:	b2db      	uxtb	r3, r3
 8000576:	001a      	movs	r2, r3
 8000578:	23a0      	movs	r3, #160	@ 0xa0
 800057a:	05db      	lsls	r3, r3, #23
 800057c:	2108      	movs	r1, #8
 800057e:	0018      	movs	r0, r3
 8000580:	f000 ffce 	bl	8001520 <HAL_GPIO_WritePin>
		    x_step_count = 0;
 8000584:	4b5e      	ldr	r3, [pc, #376]	@ (8000700 <move_axis+0x21c>)
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
		    // Enable driver
//		    HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_RESET);

		    // Start PWM
		    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800058a:	4b5c      	ldr	r3, [pc, #368]	@ (80006fc <move_axis+0x218>)
 800058c:	2100      	movs	r1, #0
 800058e:	0018      	movs	r0, r3
 8000590:	f002 f840 	bl	8002614 <HAL_TIM_PWM_Start_IT>

		    // Wait until we reach target steps
		    while(x_step_count < steps);
 8000594:	46c0      	nop			@ (mov r8, r8)
 8000596:	4b5a      	ldr	r3, [pc, #360]	@ (8000700 <move_axis+0x21c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	68ba      	ldr	r2, [r7, #8]
 800059c:	429a      	cmp	r2, r3
 800059e:	d8fa      	bhi.n	8000596 <move_axis+0xb2>

		    // Stop PWM
		    HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80005a0:	4b56      	ldr	r3, [pc, #344]	@ (80006fc <move_axis+0x218>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	0018      	movs	r0, r3
 80005a6:	f002 f907 	bl	80027b8 <HAL_TIM_PWM_Stop_IT>
//		    HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_SET);

		    break;
 80005aa:	e085      	b.n	80006b8 <move_axis+0x1d4>

		case Y:
			// Set direction
			HAL_GPIO_WritePin(Y_DIR_Port, Y_DIR_Pin, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80005ac:	230e      	movs	r3, #14
 80005ae:	18fb      	adds	r3, r7, r3
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	1e5a      	subs	r2, r3, #1
 80005b4:	4193      	sbcs	r3, r2
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	001a      	movs	r2, r3
 80005ba:	23a0      	movs	r3, #160	@ 0xa0
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	2110      	movs	r1, #16
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 ffad 	bl	8001520 <HAL_GPIO_WritePin>
		    y_step_count = 0;
 80005c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000704 <move_axis+0x220>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
		    // Enable driver
		    HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_RESET);
 80005cc:	4b4e      	ldr	r3, [pc, #312]	@ (8000708 <move_axis+0x224>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 ffa4 	bl	8001520 <HAL_GPIO_WritePin>

		    // Start PWM
		    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 80005d8:	4b48      	ldr	r3, [pc, #288]	@ (80006fc <move_axis+0x218>)
 80005da:	2104      	movs	r1, #4
 80005dc:	0018      	movs	r0, r3
 80005de:	f002 f819 	bl	8002614 <HAL_TIM_PWM_Start_IT>

		    // Wait until we reach target steps
		    while(y_step_count < steps);
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	4b47      	ldr	r3, [pc, #284]	@ (8000704 <move_axis+0x220>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	68ba      	ldr	r2, [r7, #8]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d8fa      	bhi.n	80005e4 <move_axis+0x100>

		    // Stop PWM
		    HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_2);
 80005ee:	4b43      	ldr	r3, [pc, #268]	@ (80006fc <move_axis+0x218>)
 80005f0:	2104      	movs	r1, #4
 80005f2:	0018      	movs	r0, r3
 80005f4:	f002 f8e0 	bl	80027b8 <HAL_TIM_PWM_Stop_IT>
		    HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_SET);
 80005f8:	4b43      	ldr	r3, [pc, #268]	@ (8000708 <move_axis+0x224>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	2101      	movs	r1, #1
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 ff8e 	bl	8001520 <HAL_GPIO_WritePin>

		    break;
 8000604:	e058      	b.n	80006b8 <move_axis+0x1d4>

		case Z:
			// Set direction
			HAL_GPIO_WritePin(Z_DIR_Port, Z_DIR_Pin, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000606:	230e      	movs	r3, #14
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	1e5a      	subs	r2, r3, #1
 800060e:	4193      	sbcs	r3, r2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	001a      	movs	r2, r3
 8000614:	23a0      	movs	r3, #160	@ 0xa0
 8000616:	05db      	lsls	r3, r3, #23
 8000618:	2120      	movs	r1, #32
 800061a:	0018      	movs	r0, r3
 800061c:	f000 ff80 	bl	8001520 <HAL_GPIO_WritePin>
		    z_step_count = 0;
 8000620:	4b3a      	ldr	r3, [pc, #232]	@ (800070c <move_axis+0x228>)
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
		    // Enable driver
		    HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_RESET);
 8000626:	4b38      	ldr	r3, [pc, #224]	@ (8000708 <move_axis+0x224>)
 8000628:	2200      	movs	r2, #0
 800062a:	2101      	movs	r1, #1
 800062c:	0018      	movs	r0, r3
 800062e:	f000 ff77 	bl	8001520 <HAL_GPIO_WritePin>

		    // Start PWM
		    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);
 8000632:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <move_axis+0x218>)
 8000634:	2108      	movs	r1, #8
 8000636:	0018      	movs	r0, r3
 8000638:	f001 ffec 	bl	8002614 <HAL_TIM_PWM_Start_IT>

		    // Wait until we reach target steps
		    while(z_step_count < steps);
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	4b33      	ldr	r3, [pc, #204]	@ (800070c <move_axis+0x228>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	429a      	cmp	r2, r3
 8000646:	d8fa      	bhi.n	800063e <move_axis+0x15a>

		    // Stop PWM
		    HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_3);
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <move_axis+0x218>)
 800064a:	2108      	movs	r1, #8
 800064c:	0018      	movs	r0, r3
 800064e:	f002 f8b3 	bl	80027b8 <HAL_TIM_PWM_Stop_IT>
		    HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_SET);
 8000652:	4b2d      	ldr	r3, [pc, #180]	@ (8000708 <move_axis+0x224>)
 8000654:	2201      	movs	r2, #1
 8000656:	2101      	movs	r1, #1
 8000658:	0018      	movs	r0, r3
 800065a:	f000 ff61 	bl	8001520 <HAL_GPIO_WritePin>

		    break;
 800065e:	e02b      	b.n	80006b8 <move_axis+0x1d4>

		case A:
			// Set direction
			HAL_GPIO_WritePin(A_DIR_Port, A_DIR_Pin, dir ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000660:	230e      	movs	r3, #14
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	1e5a      	subs	r2, r3, #1
 8000668:	4193      	sbcs	r3, r2
 800066a:	b2db      	uxtb	r3, r3
 800066c:	001a      	movs	r2, r3
 800066e:	4b26      	ldr	r3, [pc, #152]	@ (8000708 <move_axis+0x224>)
 8000670:	2102      	movs	r1, #2
 8000672:	0018      	movs	r0, r3
 8000674:	f000 ff54 	bl	8001520 <HAL_GPIO_WritePin>
		    a_step_count = 0;
 8000678:	4b25      	ldr	r3, [pc, #148]	@ (8000710 <move_axis+0x22c>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
		    // Enable driver
		    HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_RESET);
 800067e:	4b22      	ldr	r3, [pc, #136]	@ (8000708 <move_axis+0x224>)
 8000680:	2200      	movs	r2, #0
 8000682:	2101      	movs	r1, #1
 8000684:	0018      	movs	r0, r3
 8000686:	f000 ff4b 	bl	8001520 <HAL_GPIO_WritePin>

		    // Start PWM
		    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 800068a:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <move_axis+0x218>)
 800068c:	210c      	movs	r1, #12
 800068e:	0018      	movs	r0, r3
 8000690:	f001 ffc0 	bl	8002614 <HAL_TIM_PWM_Start_IT>

		    // Wait until we reach target steps
		    while(a_step_count < steps);
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	4b1e      	ldr	r3, [pc, #120]	@ (8000710 <move_axis+0x22c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68ba      	ldr	r2, [r7, #8]
 800069c:	429a      	cmp	r2, r3
 800069e:	d8fa      	bhi.n	8000696 <move_axis+0x1b2>

		    // Stop PWM
		    HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_4);
 80006a0:	4b16      	ldr	r3, [pc, #88]	@ (80006fc <move_axis+0x218>)
 80006a2:	210c      	movs	r1, #12
 80006a4:	0018      	movs	r0, r3
 80006a6:	f002 f887 	bl	80027b8 <HAL_TIM_PWM_Stop_IT>
		    HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_SET);
 80006aa:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <move_axis+0x224>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	2101      	movs	r1, #1
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 ff35 	bl	8001520 <HAL_GPIO_WritePin>

		    break;
 80006b6:	46c0      	nop			@ (mov r8, r8)
	}
    // Enable driver
    HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_RESET);
 80006b8:	4b13      	ldr	r3, [pc, #76]	@ (8000708 <move_axis+0x224>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	2101      	movs	r1, #1
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 ff2e 	bl	8001520 <HAL_GPIO_WritePin>

    // Start PWM
    HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 80006c4:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <move_axis+0x218>)
 80006c6:	2100      	movs	r1, #0
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 ffa3 	bl	8002614 <HAL_TIM_PWM_Start_IT>

    // Wait until we reach target steps
    while(x_step_count < steps);
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <move_axis+0x21c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d8fa      	bhi.n	80006d0 <move_axis+0x1ec>

    // Stop PWM
    HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_1);
 80006da:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <move_axis+0x218>)
 80006dc:	2100      	movs	r1, #0
 80006de:	0018      	movs	r0, r3
 80006e0:	f002 f86a 	bl	80027b8 <HAL_TIM_PWM_Stop_IT>
    HAL_GPIO_WritePin(EN_Port, EN_Pin, GPIO_PIN_SET);
 80006e4:	4b08      	ldr	r3, [pc, #32]	@ (8000708 <move_axis+0x224>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	2101      	movs	r1, #1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 ff18 	bl	8001520 <HAL_GPIO_WritePin>
}
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b007      	add	sp, #28
 80006f6:	bd90      	pop	{r4, r7, pc}
 80006f8:	000f4240 	.word	0x000f4240
 80006fc:	20000028 	.word	0x20000028
 8000700:	200000f0 	.word	0x200000f0
 8000704:	200000f4 	.word	0x200000f4
 8000708:	50000400 	.word	0x50000400
 800070c:	200000f8 	.word	0x200000f8
 8000710:	200000fc 	.word	0x200000fc

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071a:	f000 fc7d 	bl	8001018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f83d 	bl	800079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000722:	f000 f975 	bl	8000a10 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000726:	f000 f8a5 	bl	8000874 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800072a:	f000 f941 	bl	80009b0 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Debug vars
  char buf[20];
  uint8_t bufLen = 0;
 800072e:	2317      	movs	r3, #23
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
//      move_axis(X, 1600, 1000, 0);
//      HAL_Delay(1000);

	  // Example: Move Y axis forward at 1 kHz for ~2s
      // Move 1600 steps forward (half revolution at 1/16 microstep)
      move_axis(Y, 254, 1000, 1);
 8000736:	23fa      	movs	r3, #250	@ 0xfa
 8000738:	009a      	lsls	r2, r3, #2
 800073a:	2301      	movs	r3, #1
 800073c:	21fe      	movs	r1, #254	@ 0xfe
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff fed0 	bl	80004e4 <move_axis>
      HAL_Delay(1000);
 8000744:	23fa      	movs	r3, #250	@ 0xfa
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	0018      	movs	r0, r3
 800074a:	f000 fca1 	bl	8001090 <HAL_Delay>

      // Move back 1600 steps
      move_axis(Y, 100, 1000, 0);
 800074e:	23fa      	movs	r3, #250	@ 0xfa
 8000750:	009a      	lsls	r2, r3, #2
 8000752:	2300      	movs	r3, #0
 8000754:	2164      	movs	r1, #100	@ 0x64
 8000756:	2001      	movs	r0, #1
 8000758:	f7ff fec4 	bl	80004e4 <move_axis>
      HAL_Delay(1000);
 800075c:	23fa      	movs	r3, #250	@ 0xfa
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	0018      	movs	r0, r3
 8000762:	f000 fc95 	bl	8001090 <HAL_Delay>
//      move_axis(Z, 1600, 1000, 0);
//      HAL_Delay(1000);

	  // Example: Move A axis forward at 1 kHz for ~2s
      // Move 1600 steps forward (half revolution at 1/16 microstep)
      move_axis(A, 150, 1000, 1);
 8000766:	23fa      	movs	r3, #250	@ 0xfa
 8000768:	009a      	lsls	r2, r3, #2
 800076a:	2301      	movs	r3, #1
 800076c:	2196      	movs	r1, #150	@ 0x96
 800076e:	2003      	movs	r0, #3
 8000770:	f7ff feb8 	bl	80004e4 <move_axis>
      HAL_Delay(1000);
 8000774:	23fa      	movs	r3, #250	@ 0xfa
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fc89 	bl	8001090 <HAL_Delay>

      // Move back 1600 steps
      move_axis(A, 35, 1000, 0);
 800077e:	23fa      	movs	r3, #250	@ 0xfa
 8000780:	009a      	lsls	r2, r3, #2
 8000782:	2300      	movs	r3, #0
 8000784:	2123      	movs	r1, #35	@ 0x23
 8000786:	2003      	movs	r0, #3
 8000788:	f7ff feac 	bl	80004e4 <move_axis>
      HAL_Delay(1000);
 800078c:	23fa      	movs	r3, #250	@ 0xfa
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	0018      	movs	r0, r3
 8000792:	f000 fc7d 	bl	8001090 <HAL_Delay>
      move_axis(Y, 254, 1000, 1);
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	e7cd      	b.n	8000736 <main+0x22>
	...

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b09d      	sub	sp, #116	@ 0x74
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	2438      	movs	r4, #56	@ 0x38
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	0018      	movs	r0, r3
 80007a8:	2338      	movs	r3, #56	@ 0x38
 80007aa:	001a      	movs	r2, r3
 80007ac:	2100      	movs	r1, #0
 80007ae:	f003 fa81 	bl	8003cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b2:	2324      	movs	r3, #36	@ 0x24
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	0018      	movs	r0, r3
 80007b8:	2314      	movs	r3, #20
 80007ba:	001a      	movs	r2, r3
 80007bc:	2100      	movs	r1, #0
 80007be:	f003 fa79 	bl	8003cb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c2:	003b      	movs	r3, r7
 80007c4:	0018      	movs	r0, r3
 80007c6:	2324      	movs	r3, #36	@ 0x24
 80007c8:	001a      	movs	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f003 fa72 	bl	8003cb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d0:	4b26      	ldr	r3, [pc, #152]	@ (800086c <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a26      	ldr	r2, [pc, #152]	@ (8000870 <SystemClock_Config+0xd4>)
 80007d6:	401a      	ands	r2, r3
 80007d8:	4b24      	ldr	r3, [pc, #144]	@ (800086c <SystemClock_Config+0xd0>)
 80007da:	2180      	movs	r1, #128	@ 0x80
 80007dc:	0109      	lsls	r1, r1, #4
 80007de:	430a      	orrs	r2, r1
 80007e0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007e2:	0021      	movs	r1, r4
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2210      	movs	r2, #16
 80007e8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2201      	movs	r2, #1
 80007ee:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	22a0      	movs	r2, #160	@ 0xa0
 80007fa:	0212      	lsls	r2, r2, #8
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000804:	187b      	adds	r3, r7, r1
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fea8 	bl	800155c <HAL_RCC_OscConfig>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000810:	f000 fa24 	bl	8000c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000814:	2124      	movs	r1, #36	@ 0x24
 8000816:	187b      	adds	r3, r7, r1
 8000818:	220f      	movs	r2, #15
 800081a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2200      	movs	r2, #0
 8000820:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2100      	movs	r1, #0
 8000838:	0018      	movs	r0, r3
 800083a:	f001 fa53 	bl	8001ce4 <HAL_RCC_ClockConfig>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000842:	f000 fa0b 	bl	8000c5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000846:	003b      	movs	r3, r7
 8000848:	2201      	movs	r2, #1
 800084a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800084c:	003b      	movs	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000852:	003b      	movs	r3, r7
 8000854:	0018      	movs	r0, r3
 8000856:	f001 fc7b 	bl	8002150 <HAL_RCCEx_PeriphCLKConfig>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800085e:	f000 f9fd 	bl	8000c5c <Error_Handler>
  }
}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b01d      	add	sp, #116	@ 0x74
 8000868:	bd90      	pop	{r4, r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	40007000 	.word	0x40007000
 8000870:	ffffe7ff 	.word	0xffffe7ff

08000874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	2318      	movs	r3, #24
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	0018      	movs	r0, r3
 8000880:	2310      	movs	r3, #16
 8000882:	001a      	movs	r2, r3
 8000884:	2100      	movs	r1, #0
 8000886:	f003 fa15 	bl	8003cb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088a:	2310      	movs	r3, #16
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	0018      	movs	r0, r3
 8000890:	2308      	movs	r3, #8
 8000892:	001a      	movs	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	f003 fa0d 	bl	8003cb4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800089a:	003b      	movs	r3, r7
 800089c:	0018      	movs	r0, r3
 800089e:	2310      	movs	r3, #16
 80008a0:	001a      	movs	r2, r3
 80008a2:	2100      	movs	r1, #0
 80008a4:	f003 fa06 	bl	8003cb4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008a8:	4b3f      	ldr	r3, [pc, #252]	@ (80009a8 <MX_TIM2_Init+0x134>)
 80008aa:	2280      	movs	r2, #128	@ 0x80
 80008ac:	05d2      	lsls	r2, r2, #23
 80008ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80008b0:	4b3d      	ldr	r3, [pc, #244]	@ (80009a8 <MX_TIM2_Init+0x134>)
 80008b2:	221f      	movs	r2, #31
 80008b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b3c      	ldr	r3, [pc, #240]	@ (80009a8 <MX_TIM2_Init+0x134>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80008bc:	4b3a      	ldr	r3, [pc, #232]	@ (80009a8 <MX_TIM2_Init+0x134>)
 80008be:	4a3b      	ldr	r2, [pc, #236]	@ (80009ac <MX_TIM2_Init+0x138>)
 80008c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c2:	4b39      	ldr	r3, [pc, #228]	@ (80009a8 <MX_TIM2_Init+0x134>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c8:	4b37      	ldr	r3, [pc, #220]	@ (80009a8 <MX_TIM2_Init+0x134>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ce:	4b36      	ldr	r3, [pc, #216]	@ (80009a8 <MX_TIM2_Init+0x134>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fdcb 	bl	800246c <HAL_TIM_Base_Init>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008da:	f000 f9bf 	bl	8000c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008de:	2118      	movs	r1, #24
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2280      	movs	r2, #128	@ 0x80
 80008e4:	0152      	lsls	r2, r2, #5
 80008e6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008e8:	187a      	adds	r2, r7, r1
 80008ea:	4b2f      	ldr	r3, [pc, #188]	@ (80009a8 <MX_TIM2_Init+0x134>)
 80008ec:	0011      	movs	r1, r2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f002 f978 	bl	8002be4 <HAL_TIM_ConfigClockSource>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 80008f8:	f000 f9b0 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008fc:	4b2a      	ldr	r3, [pc, #168]	@ (80009a8 <MX_TIM2_Init+0x134>)
 80008fe:	0018      	movs	r0, r3
 8000900:	f001 fe40 	bl	8002584 <HAL_TIM_PWM_Init>
 8000904:	1e03      	subs	r3, r0, #0
 8000906:	d001      	beq.n	800090c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000908:	f000 f9a8 	bl	8000c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090c:	2110      	movs	r1, #16
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800091a:	187a      	adds	r2, r7, r1
 800091c:	4b22      	ldr	r3, [pc, #136]	@ (80009a8 <MX_TIM2_Init+0x134>)
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f002 fc67 	bl	80031f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800092a:	f000 f997 	bl	8000c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800092e:	003b      	movs	r3, r7
 8000930:	2260      	movs	r2, #96	@ 0x60
 8000932:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000934:	003b      	movs	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093a:	003b      	movs	r3, r7
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000940:	003b      	movs	r3, r7
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000946:	0039      	movs	r1, r7
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_TIM2_Init+0x134>)
 800094a:	2200      	movs	r2, #0
 800094c:	0018      	movs	r0, r3
 800094e:	f002 f883 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 8000952:	1e03      	subs	r3, r0, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000956:	f000 f981 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800095a:	0039      	movs	r1, r7
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <MX_TIM2_Init+0x134>)
 800095e:	2204      	movs	r2, #4
 8000960:	0018      	movs	r0, r3
 8000962:	f002 f879 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800096a:	f000 f977 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800096e:	0039      	movs	r1, r7
 8000970:	4b0d      	ldr	r3, [pc, #52]	@ (80009a8 <MX_TIM2_Init+0x134>)
 8000972:	2208      	movs	r2, #8
 8000974:	0018      	movs	r0, r3
 8000976:	f002 f86f 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 800097e:	f000 f96d 	bl	8000c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000982:	0039      	movs	r1, r7
 8000984:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <MX_TIM2_Init+0x134>)
 8000986:	220c      	movs	r2, #12
 8000988:	0018      	movs	r0, r3
 800098a:	f002 f865 	bl	8002a58 <HAL_TIM_PWM_ConfigChannel>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000992:	f000 f963 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000996:	4b04      	ldr	r3, [pc, #16]	@ (80009a8 <MX_TIM2_Init+0x134>)
 8000998:	0018      	movs	r0, r3
 800099a:	f000 f997 	bl	8000ccc <HAL_TIM_MspPostInit>

}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b00a      	add	sp, #40	@ 0x28
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	20000028 	.word	0x20000028
 80009ac:	000003e7 	.word	0x000003e7

080009b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b4:	4b14      	ldr	r3, [pc, #80]	@ (8000a08 <MX_USART1_UART_Init+0x58>)
 80009b6:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <MX_USART1_UART_Init+0x5c>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ba:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <MX_USART1_UART_Init+0x58>)
 80009bc:	22e1      	movs	r2, #225	@ 0xe1
 80009be:	0252      	lsls	r2, r2, #9
 80009c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b11      	ldr	r3, [pc, #68]	@ (8000a08 <MX_USART1_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_USART1_UART_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000a08 <MX_USART1_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <MX_USART1_UART_Init+0x58>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <MX_USART1_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b09      	ldr	r3, [pc, #36]	@ (8000a08 <MX_USART1_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <MX_USART1_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_USART1_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f2:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <MX_USART1_UART_Init+0x58>)
 80009f4:	0018      	movs	r0, r3
 80009f6:	f002 fc55 	bl	80032a4 <HAL_UART_Init>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009fe:	f000 f92d 	bl	8000c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000068 	.word	0x20000068
 8000a0c:	40013800 	.word	0x40013800

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b08b      	sub	sp, #44	@ 0x2c
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	2414      	movs	r4, #20
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2314      	movs	r3, #20
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	f003 f947 	bl	8003cb4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b7f      	ldr	r3, [pc, #508]	@ (8000c24 <MX_GPIO_Init+0x214>)
 8000a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a2a:	4b7e      	ldr	r3, [pc, #504]	@ (8000c24 <MX_GPIO_Init+0x214>)
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a32:	4b7c      	ldr	r3, [pc, #496]	@ (8000c24 <MX_GPIO_Init+0x214>)
 8000a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a36:	2204      	movs	r2, #4
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3e:	4b79      	ldr	r3, [pc, #484]	@ (8000c24 <MX_GPIO_Init+0x214>)
 8000a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a42:	4b78      	ldr	r3, [pc, #480]	@ (8000c24 <MX_GPIO_Init+0x214>)
 8000a44:	2180      	movs	r1, #128	@ 0x80
 8000a46:	430a      	orrs	r2, r1
 8000a48:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a4a:	4b76      	ldr	r3, [pc, #472]	@ (8000c24 <MX_GPIO_Init+0x214>)
 8000a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a4e:	2280      	movs	r2, #128	@ 0x80
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b73      	ldr	r3, [pc, #460]	@ (8000c24 <MX_GPIO_Init+0x214>)
 8000a58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a5a:	4b72      	ldr	r3, [pc, #456]	@ (8000c24 <MX_GPIO_Init+0x214>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a62:	4b70      	ldr	r3, [pc, #448]	@ (8000c24 <MX_GPIO_Init+0x214>)
 8000a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a66:	2201      	movs	r2, #1
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8000c24 <MX_GPIO_Init+0x214>)
 8000a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a72:	4b6c      	ldr	r3, [pc, #432]	@ (8000c24 <MX_GPIO_Init+0x214>)
 8000a74:	2102      	movs	r1, #2
 8000a76:	430a      	orrs	r2, r1
 8000a78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a7a:	4b6a      	ldr	r3, [pc, #424]	@ (8000c24 <MX_GPIO_Init+0x214>)
 8000a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7e:	2202      	movs	r2, #2
 8000a80:	4013      	ands	r3, r2
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, X_DIR_Pin|Y_DIR_Pin|Z_DIR_Pin|ENA9_Pin, GPIO_PIN_RESET);
 8000a86:	238e      	movs	r3, #142	@ 0x8e
 8000a88:	0099      	lsls	r1, r3, #2
 8000a8a:	23a0      	movs	r3, #160	@ 0xa0
 8000a8c:	05db      	lsls	r3, r3, #23
 8000a8e:	2200      	movs	r2, #0
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fd45 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_Pin|A_DIR_Pin|Y_DIRB10_Pin, GPIO_PIN_RESET);
 8000a96:	4964      	ldr	r1, [pc, #400]	@ (8000c28 <MX_GPIO_Init+0x218>)
 8000a98:	4b64      	ldr	r3, [pc, #400]	@ (8000c2c <MX_GPIO_Init+0x21c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 fd3f 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	2280      	movs	r2, #128	@ 0x80
 8000aa6:	0192      	lsls	r2, r2, #6
 8000aa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2284      	movs	r2, #132	@ 0x84
 8000aae:	0392      	lsls	r2, r2, #14
 8000ab0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	4a5d      	ldr	r2, [pc, #372]	@ (8000c30 <MX_GPIO_Init+0x220>)
 8000abc:	0019      	movs	r1, r3
 8000abe:	0010      	movs	r0, r2
 8000ac0:	f000 fbb8 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : X_DIR_Pin Y_DIR_Pin Z_DIR_Pin */
  GPIO_InitStruct.Pin = X_DIR_Pin|Y_DIR_Pin|Z_DIR_Pin;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2238      	movs	r2, #56	@ 0x38
 8000ac8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	2201      	movs	r2, #1
 8000ace:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	193a      	adds	r2, r7, r4
 8000ade:	23a0      	movs	r3, #160	@ 0xa0
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	0011      	movs	r1, r2
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f000 fba5 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin Y_DIRB10_Pin */
  GPIO_InitStruct.Pin = EN_Pin|Y_DIRB10_Pin;
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	4a51      	ldr	r2, [pc, #324]	@ (8000c34 <MX_GPIO_Init+0x224>)
 8000aee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2201      	movs	r2, #1
 8000af4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	4a49      	ldr	r2, [pc, #292]	@ (8000c2c <MX_GPIO_Init+0x21c>)
 8000b06:	0019      	movs	r1, r3
 8000b08:	0010      	movs	r0, r2
 8000b0a:	f000 fb93 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : A_DIR_Pin */
  GPIO_InitStruct.Pin = A_DIR_Pin;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2202      	movs	r2, #2
 8000b12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	2201      	movs	r2, #1
 8000b18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(A_DIR_GPIO_Port, &GPIO_InitStruct);
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	4a40      	ldr	r2, [pc, #256]	@ (8000c2c <MX_GPIO_Init+0x21c>)
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	0010      	movs	r0, r2
 8000b2e:	f000 fb81 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENA9_Pin */
  GPIO_InitStruct.Pin = ENA9_Pin;
 8000b32:	0021      	movs	r1, r4
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2280      	movs	r2, #128	@ 0x80
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	000c      	movs	r4, r1
 8000b3e:	193b      	adds	r3, r7, r4
 8000b40:	2201      	movs	r2, #1
 8000b42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	193b      	adds	r3, r7, r4
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENA9_GPIO_Port, &GPIO_InitStruct);
 8000b50:	193a      	adds	r2, r7, r4
 8000b52:	23a0      	movs	r3, #160	@ 0xa0
 8000b54:	05db      	lsls	r3, r3, #23
 8000b56:	0011      	movs	r1, r2
 8000b58:	0018      	movs	r0, r3
 8000b5a:	f000 fb6b 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  	/*Configure GPIO pins : X_DIR_Pin Y_DIR_Pin Z_DIR_Pin */
	GPIO_InitStruct.Pin = X_DIR_Pin;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2208      	movs	r2, #8
 8000b62:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2201      	movs	r2, #1
 8000b68:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	193a      	adds	r2, r7, r4
 8000b78:	23a0      	movs	r3, #160	@ 0xa0
 8000b7a:	05db      	lsls	r3, r3, #23
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 fb58 	bl	8001234 <HAL_GPIO_Init>

  	/*Configure GPIO pins : X_DIR_Pin Y_DIR_Pin Z_DIR_Pin */
	GPIO_InitStruct.Pin = Y_DIR_Pin;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2210      	movs	r2, #16
 8000b88:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2201      	movs	r2, #1
 8000b94:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	193a      	adds	r2, r7, r4
 8000b9e:	23a0      	movs	r3, #160	@ 0xa0
 8000ba0:	05db      	lsls	r3, r3, #23
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f000 fb45 	bl	8001234 <HAL_GPIO_Init>

  	/*Configure GPIO pins : X_DIR_Pin Y_DIR_Pin Z_DIR_Pin */
	GPIO_InitStruct.Pin = Z_DIR_Pin;
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	2220      	movs	r2, #32
 8000bae:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	2201      	movs	r2, #1
 8000bba:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	193a      	adds	r2, r7, r4
 8000bc4:	23a0      	movs	r3, #160	@ 0xa0
 8000bc6:	05db      	lsls	r3, r3, #23
 8000bc8:	0011      	movs	r1, r2
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 fb32 	bl	8001234 <HAL_GPIO_Init>

	/*Configure GPIO pin : A_DIR_Pin */
	GPIO_InitStruct.Pin = A_DIR_Pin;
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	2201      	movs	r2, #1
 8000bda:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	2201      	movs	r2, #1
 8000be0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(A_DIR_Port, &GPIO_InitStruct);
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	4a10      	ldr	r2, [pc, #64]	@ (8000c2c <MX_GPIO_Init+0x21c>)
 8000bec:	0019      	movs	r1, r3
 8000bee:	0010      	movs	r0, r2
 8000bf0:	f000 fb20 	bl	8001234 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENA9_Pin */
	GPIO_InitStruct.Pin = EN_Pin;
 8000bf4:	0021      	movs	r1, r4
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2201      	movs	r2, #1
 8000c00:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(EN_Port, &GPIO_InitStruct);
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	4a06      	ldr	r2, [pc, #24]	@ (8000c2c <MX_GPIO_Init+0x21c>)
 8000c12:	0019      	movs	r1, r3
 8000c14:	0010      	movs	r0, r2
 8000c16:	f000 fb0d 	bl	8001234 <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b00b      	add	sp, #44	@ 0x2c
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	46c0      	nop			@ (mov r8, r8)
 8000c24:	40021000 	.word	0x40021000
 8000c28:	00000403 	.word	0x00000403
 8000c2c:	50000400 	.word	0x50000400
 8000c30:	50000800 	.word	0x50000800
 8000c34:	00000401 	.word	0x00000401

08000c38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d101      	bne.n	8000c4e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c4a:	f000 fa05 	bl	8001058 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4e:	46c0      	nop			@ (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	40001000 	.word	0x40001000

08000c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c60:	b672      	cpsid	i
}
 8000c62:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	e7fd      	b.n	8000c64 <Error_Handler+0x8>

08000c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <HAL_MspInit+0x24>)
 8000c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_MspInit+0x24>)
 8000c72:	2101      	movs	r1, #1
 8000c74:	430a      	orrs	r2, r1
 8000c76:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c78:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <HAL_MspInit+0x24>)
 8000c7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c7c:	4b03      	ldr	r3, [pc, #12]	@ (8000c8c <HAL_MspInit+0x24>)
 8000c7e:	2180      	movs	r1, #128	@ 0x80
 8000c80:	0549      	lsls	r1, r1, #21
 8000c82:	430a      	orrs	r2, r1
 8000c84:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	46c0      	nop			@ (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	2380      	movs	r3, #128	@ 0x80
 8000c9e:	05db      	lsls	r3, r3, #23
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d10d      	bne.n	8000cc0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <HAL_TIM_Base_MspInit+0x38>)
 8000ca6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ca8:	4b07      	ldr	r3, [pc, #28]	@ (8000cc8 <HAL_TIM_Base_MspInit+0x38>)
 8000caa:	2101      	movs	r1, #1
 8000cac:	430a      	orrs	r2, r1
 8000cae:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	200f      	movs	r0, #15
 8000cb6:	f000 fa97 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cba:	200f      	movs	r0, #15
 8000cbc:	f000 faa9 	bl	8001212 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000cc0:	46c0      	nop			@ (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b002      	add	sp, #8
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000

08000ccc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b08b      	sub	sp, #44	@ 0x2c
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	2414      	movs	r4, #20
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	0018      	movs	r0, r3
 8000cda:	2314      	movs	r3, #20
 8000cdc:	001a      	movs	r2, r3
 8000cde:	2100      	movs	r1, #0
 8000ce0:	f002 ffe8 	bl	8003cb4 <memset>
  if(htim->Instance==TIM2)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	2380      	movs	r3, #128	@ 0x80
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d144      	bne.n	8000d7a <HAL_TIM_MspPostInit+0xae>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf0:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <HAL_TIM_MspPostInit+0xb8>)
 8000cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cf4:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <HAL_TIM_MspPostInit+0xb8>)
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cfc:	4b21      	ldr	r3, [pc, #132]	@ (8000d84 <HAL_TIM_MspPostInit+0xb8>)
 8000cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d00:	2201      	movs	r2, #1
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d08:	4b1e      	ldr	r3, [pc, #120]	@ (8000d84 <HAL_TIM_MspPostInit+0xb8>)
 8000d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <HAL_TIM_MspPostInit+0xb8>)
 8000d0e:	2102      	movs	r1, #2
 8000d10:	430a      	orrs	r2, r1
 8000d12:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <HAL_TIM_MspPostInit+0xb8>)
 8000d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d18:	2202      	movs	r2, #2
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = X_STEP_Pin|Y_STEP_Pin|Z_STEP_Pin;
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	2207      	movs	r2, #7
 8000d24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	2202      	movs	r2, #2
 8000d2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	193a      	adds	r2, r7, r4
 8000d40:	23a0      	movs	r3, #160	@ 0xa0
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	0011      	movs	r1, r2
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 fa74 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_STEP_Pin;
 8000d4c:	0021      	movs	r1, r4
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2280      	movs	r2, #128	@ 0x80
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2202      	movs	r2, #2
 8000d5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(A_STEP_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <HAL_TIM_MspPostInit+0xbc>)
 8000d72:	0019      	movs	r1, r3
 8000d74:	0010      	movs	r0, r2
 8000d76:	f000 fa5d 	bl	8001234 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b00b      	add	sp, #44	@ 0x2c
 8000d80:	bd90      	pop	{r4, r7, pc}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	40021000 	.word	0x40021000
 8000d88:	50000400 	.word	0x50000400

08000d8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b590      	push	{r4, r7, lr}
 8000d8e:	b08b      	sub	sp, #44	@ 0x2c
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	2414      	movs	r4, #20
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	0018      	movs	r0, r3
 8000d9a:	2314      	movs	r3, #20
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f002 ff88 	bl	8003cb4 <memset>
  if(huart->Instance==USART1)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a29      	ldr	r2, [pc, #164]	@ (8000e50 <HAL_UART_MspInit+0xc4>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d14b      	bne.n	8000e46 <HAL_UART_MspInit+0xba>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dae:	4b29      	ldr	r3, [pc, #164]	@ (8000e54 <HAL_UART_MspInit+0xc8>)
 8000db0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000db2:	4b28      	ldr	r3, [pc, #160]	@ (8000e54 <HAL_UART_MspInit+0xc8>)
 8000db4:	2180      	movs	r1, #128	@ 0x80
 8000db6:	01c9      	lsls	r1, r1, #7
 8000db8:	430a      	orrs	r2, r1
 8000dba:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b25      	ldr	r3, [pc, #148]	@ (8000e54 <HAL_UART_MspInit+0xc8>)
 8000dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dc0:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <HAL_UART_MspInit+0xc8>)
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dc8:	4b22      	ldr	r3, [pc, #136]	@ (8000e54 <HAL_UART_MspInit+0xc8>)
 8000dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <HAL_UART_MspInit+0xc8>)
 8000dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dd8:	4b1e      	ldr	r3, [pc, #120]	@ (8000e54 <HAL_UART_MspInit+0xc8>)
 8000dda:	2102      	movs	r1, #2
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000de0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <HAL_UART_MspInit+0xc8>)
 8000de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de4:	2202      	movs	r2, #2
 8000de6:	4013      	ands	r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dec:	193b      	adds	r3, r7, r4
 8000dee:	2280      	movs	r2, #128	@ 0x80
 8000df0:	00d2      	lsls	r2, r2, #3
 8000df2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	193b      	adds	r3, r7, r4
 8000df6:	2202      	movs	r2, #2
 8000df8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	2203      	movs	r2, #3
 8000e04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	2204      	movs	r2, #4
 8000e0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	193a      	adds	r2, r7, r4
 8000e0e:	23a0      	movs	r3, #160	@ 0xa0
 8000e10:	05db      	lsls	r3, r3, #23
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f000 fa0d 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e1a:	0021      	movs	r1, r4
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2240      	movs	r2, #64	@ 0x40
 8000e20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2202      	movs	r2, #2
 8000e26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2203      	movs	r2, #3
 8000e32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	4a06      	ldr	r2, [pc, #24]	@ (8000e58 <HAL_UART_MspInit+0xcc>)
 8000e3e:	0019      	movs	r1, r3
 8000e40:	0010      	movs	r0, r2
 8000e42:	f000 f9f7 	bl	8001234 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b00b      	add	sp, #44	@ 0x2c
 8000e4c:	bd90      	pop	{r4, r7, pc}
 8000e4e:	46c0      	nop			@ (mov r8, r8)
 8000e50:	40013800 	.word	0x40013800
 8000e54:	40021000 	.word	0x40021000
 8000e58:	50000400 	.word	0x50000400

08000e5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b5b0      	push	{r4, r5, r7, lr}
 8000e5e:	b08c      	sub	sp, #48	@ 0x30
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	0019      	movs	r1, r3
 8000e6a:	2011      	movs	r0, #17
 8000e6c:	f000 f9bc 	bl	80011e8 <HAL_NVIC_SetPriority>
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e70:	2011      	movs	r0, #17
 8000e72:	f000 f9ce 	bl	8001212 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e76:	4b32      	ldr	r3, [pc, #200]	@ (8000f40 <HAL_InitTick+0xe4>)
 8000e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e7a:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <HAL_InitTick+0xe4>)
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e82:	2308      	movs	r3, #8
 8000e84:	18fa      	adds	r2, r7, r3
 8000e86:	240c      	movs	r4, #12
 8000e88:	193b      	adds	r3, r7, r4
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f001 f92d 	bl	80020ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d104      	bne.n	8000ea8 <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e9e:	f001 f8f9 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ea6:	e004      	b.n	8000eb2 <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ea8:	f001 f8f4 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 8000eac:	0003      	movs	r3, r0
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eb4:	4923      	ldr	r1, [pc, #140]	@ (8000f44 <HAL_InitTick+0xe8>)
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f7ff f926 	bl	8000108 <__udivsi3>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <HAL_InitTick+0xec>)
 8000ec4:	4a21      	ldr	r2, [pc, #132]	@ (8000f4c <HAL_InitTick+0xf0>)
 8000ec6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ec8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f48 <HAL_InitTick+0xec>)
 8000eca:	4a21      	ldr	r2, [pc, #132]	@ (8000f50 <HAL_InitTick+0xf4>)
 8000ecc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <HAL_InitTick+0xec>)
 8000ed0:	6a3a      	ldr	r2, [r7, #32]
 8000ed2:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <HAL_InitTick+0xec>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b1b      	ldr	r3, [pc, #108]	@ (8000f48 <HAL_InitTick+0xec>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000ee0:	252b      	movs	r5, #43	@ 0x2b
 8000ee2:	197c      	adds	r4, r7, r5
 8000ee4:	4b18      	ldr	r3, [pc, #96]	@ (8000f48 <HAL_InitTick+0xec>)
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f001 fac0 	bl	800246c <HAL_TIM_Base_Init>
 8000eec:	0003      	movs	r3, r0
 8000eee:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000ef0:	197b      	adds	r3, r7, r5
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d11b      	bne.n	8000f30 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ef8:	197c      	adds	r4, r7, r5
 8000efa:	4b13      	ldr	r3, [pc, #76]	@ (8000f48 <HAL_InitTick+0xec>)
 8000efc:	0018      	movs	r0, r3
 8000efe:	f001 faf5 	bl	80024ec <HAL_TIM_Base_Start_IT>
 8000f02:	0003      	movs	r3, r0
 8000f04:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000f06:	197b      	adds	r3, r7, r5
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d110      	bne.n	8000f30 <HAL_InitTick+0xd4>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b03      	cmp	r3, #3
 8000f12:	d809      	bhi.n	8000f28 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	0019      	movs	r1, r3
 8000f1a:	2011      	movs	r0, #17
 8000f1c:	f000 f964 	bl	80011e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	@ (8000f54 <HAL_InitTick+0xf8>)
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	e003      	b.n	8000f30 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000f28:	232b      	movs	r3, #43	@ 0x2b
 8000f2a:	18fb      	adds	r3, r7, r3
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000f30:	232b      	movs	r3, #43	@ 0x2b
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	781b      	ldrb	r3, [r3, #0]
}
 8000f36:	0018      	movs	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b00c      	add	sp, #48	@ 0x30
 8000f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f3e:	46c0      	nop			@ (mov r8, r8)
 8000f40:	40021000 	.word	0x40021000
 8000f44:	000f4240 	.word	0x000f4240
 8000f48:	20000100 	.word	0x20000100
 8000f4c:	40001000 	.word	0x40001000
 8000f50:	000003e7 	.word	0x000003e7
 8000f54:	20000004 	.word	0x20000004

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	e7fd      	b.n	8000f5c <NMI_Handler+0x4>

08000f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f64:	46c0      	nop			@ (mov r8, r8)
 8000f66:	e7fd      	b.n	8000f64 <HardFault_Handler+0x4>

08000f68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f6c:	46c0      	nop			@ (mov r8, r8)
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f80:	46c0      	nop			@ (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <TIM2_IRQHandler+0x14>)
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f001 fc96 	bl	80028c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f94:	46c0      	nop			@ (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	20000028 	.word	0x20000028

08000fa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <TIM6_DAC_IRQHandler+0x14>)
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f001 fc8a 	bl	80028c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fac:	46c0      	nop			@ (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	20000100 	.word	0x20000100

08000fb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	46c0      	nop			@ (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000fc4:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fc6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc8:	f7ff fff6 	bl	8000fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fcc:	480c      	ldr	r0, [pc, #48]	@ (8001000 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fce:	490d      	ldr	r1, [pc, #52]	@ (8001004 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001008 <LoopForever+0xe>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd4:	e002      	b.n	8000fdc <LoopCopyDataInit>

08000fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fda:	3304      	adds	r3, #4

08000fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe0:	d3f9      	bcc.n	8000fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800100c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8001010 <LoopForever+0x16>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe8:	e001      	b.n	8000fee <LoopFillZerobss>

08000fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fec:	3204      	adds	r2, #4

08000fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff0:	d3fb      	bcc.n	8000fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ff2:	f002 fe67 	bl	8003cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff6:	f7ff fb8d 	bl	8000714 <main>

08000ffa <LoopForever>:

LoopForever:
    b LoopForever
 8000ffa:	e7fe      	b.n	8000ffa <LoopForever>
  ldr   r0, =_estack
 8000ffc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001004:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001008:	08003da0 	.word	0x08003da0
  ldr r2, =_sbss
 800100c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001010:	20000144 	.word	0x20000144

08001014 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001014:	e7fe      	b.n	8001014 <ADC1_COMP_IRQHandler>
	...

08001018 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800101e:	1dfb      	adds	r3, r7, #7
 8001020:	2200      	movs	r2, #0
 8001022:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001024:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <HAL_Init+0x3c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_Init+0x3c>)
 800102a:	2140      	movs	r1, #64	@ 0x40
 800102c:	430a      	orrs	r2, r1
 800102e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001030:	2003      	movs	r0, #3
 8001032:	f7ff ff13 	bl	8000e5c <HAL_InitTick>
 8001036:	1e03      	subs	r3, r0, #0
 8001038:	d003      	beq.n	8001042 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e001      	b.n	8001046 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001042:	f7ff fe11 	bl	8000c68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
}
 800104a:	0018      	movs	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	40022000 	.word	0x40022000

08001058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_IncTick+0x1c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	001a      	movs	r2, r3
 8001062:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <HAL_IncTick+0x20>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	18d2      	adds	r2, r2, r3
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <HAL_IncTick+0x20>)
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	46c0      	nop			@ (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	20000008 	.word	0x20000008
 8001078:	20000140 	.word	0x20000140

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b02      	ldr	r3, [pc, #8]	@ (800108c <HAL_GetTick+0x10>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	20000140 	.word	0x20000140

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff fff0 	bl	800107c <HAL_GetTick>
 800109c:	0003      	movs	r3, r0
 800109e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	3301      	adds	r3, #1
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <HAL_Delay+0x44>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	001a      	movs	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	189b      	adds	r3, r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	f7ff ffe0 	bl	800107c <HAL_GetTick>
 80010bc:	0002      	movs	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	46c0      	nop			@ (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	20000008 	.word	0x20000008

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	0002      	movs	r2, r0
 80010e0:	1dfb      	adds	r3, r7, #7
 80010e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80010ea:	d809      	bhi.n	8001100 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ec:	1dfb      	adds	r3, r7, #7
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	001a      	movs	r2, r3
 80010f2:	231f      	movs	r3, #31
 80010f4:	401a      	ands	r2, r3
 80010f6:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <__NVIC_EnableIRQ+0x30>)
 80010f8:	2101      	movs	r1, #1
 80010fa:	4091      	lsls	r1, r2
 80010fc:	000a      	movs	r2, r1
 80010fe:	601a      	str	r2, [r3, #0]
  }
}
 8001100:	46c0      	nop			@ (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	0002      	movs	r2, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	1dfb      	adds	r3, r7, #7
 8001118:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001120:	d828      	bhi.n	8001174 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001122:	4a2f      	ldr	r2, [pc, #188]	@ (80011e0 <__NVIC_SetPriority+0xd4>)
 8001124:	1dfb      	adds	r3, r7, #7
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	b25b      	sxtb	r3, r3
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	33c0      	adds	r3, #192	@ 0xc0
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	589b      	ldr	r3, [r3, r2]
 8001132:	1dfa      	adds	r2, r7, #7
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	0011      	movs	r1, r2
 8001138:	2203      	movs	r2, #3
 800113a:	400a      	ands	r2, r1
 800113c:	00d2      	lsls	r2, r2, #3
 800113e:	21ff      	movs	r1, #255	@ 0xff
 8001140:	4091      	lsls	r1, r2
 8001142:	000a      	movs	r2, r1
 8001144:	43d2      	mvns	r2, r2
 8001146:	401a      	ands	r2, r3
 8001148:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	019b      	lsls	r3, r3, #6
 800114e:	22ff      	movs	r2, #255	@ 0xff
 8001150:	401a      	ands	r2, r3
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	0018      	movs	r0, r3
 8001158:	2303      	movs	r3, #3
 800115a:	4003      	ands	r3, r0
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001160:	481f      	ldr	r0, [pc, #124]	@ (80011e0 <__NVIC_SetPriority+0xd4>)
 8001162:	1dfb      	adds	r3, r7, #7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b25b      	sxtb	r3, r3
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	430a      	orrs	r2, r1
 800116c:	33c0      	adds	r3, #192	@ 0xc0
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001172:	e031      	b.n	80011d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001174:	4a1b      	ldr	r2, [pc, #108]	@ (80011e4 <__NVIC_SetPriority+0xd8>)
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	0019      	movs	r1, r3
 800117c:	230f      	movs	r3, #15
 800117e:	400b      	ands	r3, r1
 8001180:	3b08      	subs	r3, #8
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3306      	adds	r3, #6
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	18d3      	adds	r3, r2, r3
 800118a:	3304      	adds	r3, #4
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	1dfa      	adds	r2, r7, #7
 8001190:	7812      	ldrb	r2, [r2, #0]
 8001192:	0011      	movs	r1, r2
 8001194:	2203      	movs	r2, #3
 8001196:	400a      	ands	r2, r1
 8001198:	00d2      	lsls	r2, r2, #3
 800119a:	21ff      	movs	r1, #255	@ 0xff
 800119c:	4091      	lsls	r1, r2
 800119e:	000a      	movs	r2, r1
 80011a0:	43d2      	mvns	r2, r2
 80011a2:	401a      	ands	r2, r3
 80011a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	019b      	lsls	r3, r3, #6
 80011aa:	22ff      	movs	r2, #255	@ 0xff
 80011ac:	401a      	ands	r2, r3
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	0018      	movs	r0, r3
 80011b4:	2303      	movs	r3, #3
 80011b6:	4003      	ands	r3, r0
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011bc:	4809      	ldr	r0, [pc, #36]	@ (80011e4 <__NVIC_SetPriority+0xd8>)
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	001c      	movs	r4, r3
 80011c4:	230f      	movs	r3, #15
 80011c6:	4023      	ands	r3, r4
 80011c8:	3b08      	subs	r3, #8
 80011ca:	089b      	lsrs	r3, r3, #2
 80011cc:	430a      	orrs	r2, r1
 80011ce:	3306      	adds	r3, #6
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	18c3      	adds	r3, r0, r3
 80011d4:	3304      	adds	r3, #4
 80011d6:	601a      	str	r2, [r3, #0]
}
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b003      	add	sp, #12
 80011de:	bd90      	pop	{r4, r7, pc}
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	210f      	movs	r1, #15
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	1c02      	adds	r2, r0, #0
 80011f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b25b      	sxtb	r3, r3
 8001202:	0011      	movs	r1, r2
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff ff81 	bl	800110c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b004      	add	sp, #16
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	0002      	movs	r2, r0
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b25b      	sxtb	r3, r3
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff ff57 	bl	80010d8 <__NVIC_EnableIRQ>
}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800124a:	e14f      	b.n	80014ec <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2101      	movs	r1, #1
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4091      	lsls	r1, r2
 8001256:	000a      	movs	r2, r1
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d100      	bne.n	8001264 <HAL_GPIO_Init+0x30>
 8001262:	e140      	b.n	80014e6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	4013      	ands	r3, r2
 800126c:	2b01      	cmp	r3, #1
 800126e:	d005      	beq.n	800127c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2203      	movs	r2, #3
 8001276:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001278:	2b02      	cmp	r3, #2
 800127a:	d130      	bne.n	80012de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	409a      	lsls	r2, r3
 800128a:	0013      	movs	r3, r2
 800128c:	43da      	mvns	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012b2:	2201      	movs	r2, #1
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	43da      	mvns	r2, r3
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	091b      	lsrs	r3, r3, #4
 80012c8:	2201      	movs	r2, #1
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2203      	movs	r2, #3
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d017      	beq.n	800131a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2203      	movs	r2, #3
 8001320:	4013      	ands	r3, r2
 8001322:	2b02      	cmp	r3, #2
 8001324:	d123      	bne.n	800136e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	08da      	lsrs	r2, r3, #3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3208      	adds	r2, #8
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	58d3      	ldr	r3, [r2, r3]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2207      	movs	r2, #7
 8001338:	4013      	ands	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	409a      	lsls	r2, r3
 8001340:	0013      	movs	r3, r2
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	2107      	movs	r1, #7
 8001352:	400b      	ands	r3, r1
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	409a      	lsls	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	08da      	lsrs	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3208      	adds	r2, #8
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	6939      	ldr	r1, [r7, #16]
 800136c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	409a      	lsls	r2, r3
 800137c:	0013      	movs	r3, r2
 800137e:	43da      	mvns	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	4013      	ands	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2203      	movs	r2, #3
 800138c:	401a      	ands	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	409a      	lsls	r2, r3
 8001394:	0013      	movs	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	23c0      	movs	r3, #192	@ 0xc0
 80013a8:	029b      	lsls	r3, r3, #10
 80013aa:	4013      	ands	r3, r2
 80013ac:	d100      	bne.n	80013b0 <HAL_GPIO_Init+0x17c>
 80013ae:	e09a      	b.n	80014e6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b0:	4b54      	ldr	r3, [pc, #336]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 80013b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013b4:	4b53      	ldr	r3, [pc, #332]	@ (8001504 <HAL_GPIO_Init+0x2d0>)
 80013b6:	2101      	movs	r1, #1
 80013b8:	430a      	orrs	r2, r1
 80013ba:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80013bc:	4a52      	ldr	r2, [pc, #328]	@ (8001508 <HAL_GPIO_Init+0x2d4>)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	089b      	lsrs	r3, r3, #2
 80013c2:	3302      	adds	r3, #2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	589b      	ldr	r3, [r3, r2]
 80013c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	2203      	movs	r2, #3
 80013ce:	4013      	ands	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	409a      	lsls	r2, r3
 80013d6:	0013      	movs	r3, r2
 80013d8:	43da      	mvns	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	23a0      	movs	r3, #160	@ 0xa0
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d019      	beq.n	800141e <HAL_GPIO_Init+0x1ea>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a47      	ldr	r2, [pc, #284]	@ (800150c <HAL_GPIO_Init+0x2d8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0x1e6>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a46      	ldr	r2, [pc, #280]	@ (8001510 <HAL_GPIO_Init+0x2dc>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d00d      	beq.n	8001416 <HAL_GPIO_Init+0x1e2>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a45      	ldr	r2, [pc, #276]	@ (8001514 <HAL_GPIO_Init+0x2e0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d007      	beq.n	8001412 <HAL_GPIO_Init+0x1de>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a44      	ldr	r2, [pc, #272]	@ (8001518 <HAL_GPIO_Init+0x2e4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d101      	bne.n	800140e <HAL_GPIO_Init+0x1da>
 800140a:	2305      	movs	r3, #5
 800140c:	e008      	b.n	8001420 <HAL_GPIO_Init+0x1ec>
 800140e:	2306      	movs	r3, #6
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x1ec>
 8001412:	2303      	movs	r3, #3
 8001414:	e004      	b.n	8001420 <HAL_GPIO_Init+0x1ec>
 8001416:	2302      	movs	r3, #2
 8001418:	e002      	b.n	8001420 <HAL_GPIO_Init+0x1ec>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_GPIO_Init+0x1ec>
 800141e:	2300      	movs	r3, #0
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	2103      	movs	r1, #3
 8001424:	400a      	ands	r2, r1
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	4093      	lsls	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001430:	4935      	ldr	r1, [pc, #212]	@ (8001508 <HAL_GPIO_Init+0x2d4>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800143e:	4b37      	ldr	r3, [pc, #220]	@ (800151c <HAL_GPIO_Init+0x2e8>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43da      	mvns	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	2380      	movs	r3, #128	@ 0x80
 8001454:	035b      	lsls	r3, r3, #13
 8001456:	4013      	ands	r3, r2
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001462:	4b2e      	ldr	r3, [pc, #184]	@ (800151c <HAL_GPIO_Init+0x2e8>)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001468:	4b2c      	ldr	r3, [pc, #176]	@ (800151c <HAL_GPIO_Init+0x2e8>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43da      	mvns	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	2380      	movs	r3, #128	@ 0x80
 800147e:	039b      	lsls	r3, r3, #14
 8001480:	4013      	ands	r3, r2
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800148c:	4b23      	ldr	r3, [pc, #140]	@ (800151c <HAL_GPIO_Init+0x2e8>)
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001492:	4b22      	ldr	r3, [pc, #136]	@ (800151c <HAL_GPIO_Init+0x2e8>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	029b      	lsls	r3, r3, #10
 80014aa:	4013      	ands	r3, r2
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014b6:	4b19      	ldr	r3, [pc, #100]	@ (800151c <HAL_GPIO_Init+0x2e8>)
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014bc:	4b17      	ldr	r3, [pc, #92]	@ (800151c <HAL_GPIO_Init+0x2e8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43da      	mvns	r2, r3
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	2380      	movs	r3, #128	@ 0x80
 80014d2:	025b      	lsls	r3, r3, #9
 80014d4:	4013      	ands	r3, r2
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	@ (800151c <HAL_GPIO_Init+0x2e8>)
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	40da      	lsrs	r2, r3
 80014f4:	1e13      	subs	r3, r2, #0
 80014f6:	d000      	beq.n	80014fa <HAL_GPIO_Init+0x2c6>
 80014f8:	e6a8      	b.n	800124c <HAL_GPIO_Init+0x18>
  }
}
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	46c0      	nop			@ (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b006      	add	sp, #24
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000
 800150c:	50000400 	.word	0x50000400
 8001510:	50000800 	.word	0x50000800
 8001514:	50000c00 	.word	0x50000c00
 8001518:	50001c00 	.word	0x50001c00
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	0008      	movs	r0, r1
 800152a:	0011      	movs	r1, r2
 800152c:	1cbb      	adds	r3, r7, #2
 800152e:	1c02      	adds	r2, r0, #0
 8001530:	801a      	strh	r2, [r3, #0]
 8001532:	1c7b      	adds	r3, r7, #1
 8001534:	1c0a      	adds	r2, r1, #0
 8001536:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001538:	1c7b      	adds	r3, r7, #1
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001540:	1cbb      	adds	r3, r7, #2
 8001542:	881a      	ldrh	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800154a:	1cbb      	adds	r3, r7, #2
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b08a      	sub	sp, #40	@ 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	f000 fbaf 	bl	8001cce <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001570:	4bcf      	ldr	r3, [pc, #828]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	220c      	movs	r2, #12
 8001576:	4013      	ands	r3, r2
 8001578:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800157a:	4bcd      	ldr	r3, [pc, #820]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	2380      	movs	r3, #128	@ 0x80
 8001580:	025b      	lsls	r3, r3, #9
 8001582:	4013      	ands	r3, r2
 8001584:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2201      	movs	r2, #1
 800158c:	4013      	ands	r3, r2
 800158e:	d100      	bne.n	8001592 <HAL_RCC_OscConfig+0x36>
 8001590:	e07e      	b.n	8001690 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	2b08      	cmp	r3, #8
 8001596:	d007      	beq.n	80015a8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	2b0c      	cmp	r3, #12
 800159c:	d112      	bne.n	80015c4 <HAL_RCC_OscConfig+0x68>
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	025b      	lsls	r3, r3, #9
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d10d      	bne.n	80015c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	4bc1      	ldr	r3, [pc, #772]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	029b      	lsls	r3, r3, #10
 80015b0:	4013      	ands	r3, r2
 80015b2:	d100      	bne.n	80015b6 <HAL_RCC_OscConfig+0x5a>
 80015b4:	e06b      	b.n	800168e <HAL_RCC_OscConfig+0x132>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d167      	bne.n	800168e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	f000 fb85 	bl	8001cce <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	2380      	movs	r3, #128	@ 0x80
 80015ca:	025b      	lsls	r3, r3, #9
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d107      	bne.n	80015e0 <HAL_RCC_OscConfig+0x84>
 80015d0:	4bb7      	ldr	r3, [pc, #732]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4bb6      	ldr	r3, [pc, #728]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80015d6:	2180      	movs	r1, #128	@ 0x80
 80015d8:	0249      	lsls	r1, r1, #9
 80015da:	430a      	orrs	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	e027      	b.n	8001630 <HAL_RCC_OscConfig+0xd4>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	23a0      	movs	r3, #160	@ 0xa0
 80015e6:	02db      	lsls	r3, r3, #11
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d10e      	bne.n	800160a <HAL_RCC_OscConfig+0xae>
 80015ec:	4bb0      	ldr	r3, [pc, #704]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4baf      	ldr	r3, [pc, #700]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80015f2:	2180      	movs	r1, #128	@ 0x80
 80015f4:	02c9      	lsls	r1, r1, #11
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	4bad      	ldr	r3, [pc, #692]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4bac      	ldr	r3, [pc, #688]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001600:	2180      	movs	r1, #128	@ 0x80
 8001602:	0249      	lsls	r1, r1, #9
 8001604:	430a      	orrs	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e012      	b.n	8001630 <HAL_RCC_OscConfig+0xd4>
 800160a:	4ba9      	ldr	r3, [pc, #676]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4ba8      	ldr	r3, [pc, #672]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001610:	49a8      	ldr	r1, [pc, #672]	@ (80018b4 <HAL_RCC_OscConfig+0x358>)
 8001612:	400a      	ands	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	4ba6      	ldr	r3, [pc, #664]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	2380      	movs	r3, #128	@ 0x80
 800161c:	025b      	lsls	r3, r3, #9
 800161e:	4013      	ands	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4ba2      	ldr	r3, [pc, #648]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4ba1      	ldr	r3, [pc, #644]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 800162a:	49a3      	ldr	r1, [pc, #652]	@ (80018b8 <HAL_RCC_OscConfig+0x35c>)
 800162c:	400a      	ands	r2, r1
 800162e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d015      	beq.n	8001664 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fd20 	bl	800107c <HAL_GetTick>
 800163c:	0003      	movs	r3, r0
 800163e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001640:	e009      	b.n	8001656 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001642:	f7ff fd1b 	bl	800107c <HAL_GetTick>
 8001646:	0002      	movs	r2, r0
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b64      	cmp	r3, #100	@ 0x64
 800164e:	d902      	bls.n	8001656 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	f000 fb3c 	bl	8001cce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001656:	4b96      	ldr	r3, [pc, #600]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	2380      	movs	r3, #128	@ 0x80
 800165c:	029b      	lsls	r3, r3, #10
 800165e:	4013      	ands	r3, r2
 8001660:	d0ef      	beq.n	8001642 <HAL_RCC_OscConfig+0xe6>
 8001662:	e015      	b.n	8001690 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fd0a 	bl	800107c <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166e:	f7ff fd05 	bl	800107c <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b64      	cmp	r3, #100	@ 0x64
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e326      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001680:	4b8b      	ldr	r3, [pc, #556]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	@ 0x80
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	4013      	ands	r3, r2
 800168a:	d1f0      	bne.n	800166e <HAL_RCC_OscConfig+0x112>
 800168c:	e000      	b.n	8001690 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2202      	movs	r2, #2
 8001696:	4013      	ands	r3, r2
 8001698:	d100      	bne.n	800169c <HAL_RCC_OscConfig+0x140>
 800169a:	e08b      	b.n	80017b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016a2:	6a3b      	ldr	r3, [r7, #32]
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	d005      	beq.n	80016b4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	d13e      	bne.n	800172c <HAL_RCC_OscConfig+0x1d0>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d13b      	bne.n	800172c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80016b4:	4b7e      	ldr	r3, [pc, #504]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2204      	movs	r2, #4
 80016ba:	4013      	ands	r3, r2
 80016bc:	d004      	beq.n	80016c8 <HAL_RCC_OscConfig+0x16c>
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e302      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c8:	4b79      	ldr	r3, [pc, #484]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	4a7b      	ldr	r2, [pc, #492]	@ (80018bc <HAL_RCC_OscConfig+0x360>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	0019      	movs	r1, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	021a      	lsls	r2, r3, #8
 80016d8:	4b75      	ldr	r3, [pc, #468]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80016da:	430a      	orrs	r2, r1
 80016dc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80016de:	4b74      	ldr	r3, [pc, #464]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2209      	movs	r2, #9
 80016e4:	4393      	bics	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	4b71      	ldr	r3, [pc, #452]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016f0:	f000 fc40 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 80016f4:	0001      	movs	r1, r0
 80016f6:	4b6e      	ldr	r3, [pc, #440]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	091b      	lsrs	r3, r3, #4
 80016fc:	220f      	movs	r2, #15
 80016fe:	4013      	ands	r3, r2
 8001700:	4a6f      	ldr	r2, [pc, #444]	@ (80018c0 <HAL_RCC_OscConfig+0x364>)
 8001702:	5cd3      	ldrb	r3, [r2, r3]
 8001704:	000a      	movs	r2, r1
 8001706:	40da      	lsrs	r2, r3
 8001708:	4b6e      	ldr	r3, [pc, #440]	@ (80018c4 <HAL_RCC_OscConfig+0x368>)
 800170a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800170c:	4b6e      	ldr	r3, [pc, #440]	@ (80018c8 <HAL_RCC_OscConfig+0x36c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2513      	movs	r5, #19
 8001712:	197c      	adds	r4, r7, r5
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff fba1 	bl	8000e5c <HAL_InitTick>
 800171a:	0003      	movs	r3, r0
 800171c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800171e:	197b      	adds	r3, r7, r5
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d046      	beq.n	80017b4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001726:	197b      	adds	r3, r7, r5
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	e2d0      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d027      	beq.n	8001782 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001732:	4b5f      	ldr	r3, [pc, #380]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2209      	movs	r2, #9
 8001738:	4393      	bics	r3, r2
 800173a:	0019      	movs	r1, r3
 800173c:	4b5c      	ldr	r3, [pc, #368]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fc9a 	bl	800107c <HAL_GetTick>
 8001748:	0003      	movs	r3, r0
 800174a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800174e:	f7ff fc95 	bl	800107c <HAL_GetTick>
 8001752:	0002      	movs	r2, r0
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e2b6      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001760:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2204      	movs	r2, #4
 8001766:	4013      	ands	r3, r2
 8001768:	d0f1      	beq.n	800174e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176a:	4b51      	ldr	r3, [pc, #324]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4a53      	ldr	r2, [pc, #332]	@ (80018bc <HAL_RCC_OscConfig+0x360>)
 8001770:	4013      	ands	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	021a      	lsls	r2, r3, #8
 800177a:	4b4d      	ldr	r3, [pc, #308]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	e018      	b.n	80017b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001782:	4b4b      	ldr	r3, [pc, #300]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b4a      	ldr	r3, [pc, #296]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001788:	2101      	movs	r1, #1
 800178a:	438a      	bics	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff fc75 	bl	800107c <HAL_GetTick>
 8001792:	0003      	movs	r3, r0
 8001794:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001798:	f7ff fc70 	bl	800107c <HAL_GetTick>
 800179c:	0002      	movs	r2, r0
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e291      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017aa:	4b41      	ldr	r3, [pc, #260]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2204      	movs	r2, #4
 80017b0:	4013      	ands	r3, r2
 80017b2:	d1f1      	bne.n	8001798 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2210      	movs	r2, #16
 80017ba:	4013      	ands	r3, r2
 80017bc:	d100      	bne.n	80017c0 <HAL_RCC_OscConfig+0x264>
 80017be:	e0a1      	b.n	8001904 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d140      	bne.n	8001848 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017c6:	4b3a      	ldr	r3, [pc, #232]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	2380      	movs	r3, #128	@ 0x80
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4013      	ands	r3, r2
 80017d0:	d005      	beq.n	80017de <HAL_RCC_OscConfig+0x282>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e277      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017de:	4b34      	ldr	r3, [pc, #208]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4a3a      	ldr	r2, [pc, #232]	@ (80018cc <HAL_RCC_OscConfig+0x370>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	0019      	movs	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ec:	4b30      	ldr	r3, [pc, #192]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80017ee:	430a      	orrs	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f2:	4b2f      	ldr	r3, [pc, #188]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	0a19      	lsrs	r1, r3, #8
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	061a      	lsls	r2, r3, #24
 8001800:	4b2b      	ldr	r3, [pc, #172]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001802:	430a      	orrs	r2, r1
 8001804:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	0b5b      	lsrs	r3, r3, #13
 800180c:	3301      	adds	r3, #1
 800180e:	2280      	movs	r2, #128	@ 0x80
 8001810:	0212      	lsls	r2, r2, #8
 8001812:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001814:	4b26      	ldr	r3, [pc, #152]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	091b      	lsrs	r3, r3, #4
 800181a:	210f      	movs	r1, #15
 800181c:	400b      	ands	r3, r1
 800181e:	4928      	ldr	r1, [pc, #160]	@ (80018c0 <HAL_RCC_OscConfig+0x364>)
 8001820:	5ccb      	ldrb	r3, [r1, r3]
 8001822:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001824:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <HAL_RCC_OscConfig+0x368>)
 8001826:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001828:	4b27      	ldr	r3, [pc, #156]	@ (80018c8 <HAL_RCC_OscConfig+0x36c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2513      	movs	r5, #19
 800182e:	197c      	adds	r4, r7, r5
 8001830:	0018      	movs	r0, r3
 8001832:	f7ff fb13 	bl	8000e5c <HAL_InitTick>
 8001836:	0003      	movs	r3, r0
 8001838:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800183a:	197b      	adds	r3, r7, r5
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d060      	beq.n	8001904 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001842:	197b      	adds	r3, r7, r5
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	e242      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d03f      	beq.n	80018d0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001850:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b16      	ldr	r3, [pc, #88]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001856:	2180      	movs	r1, #128	@ 0x80
 8001858:	0049      	lsls	r1, r1, #1
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff fc0d 	bl	800107c <HAL_GetTick>
 8001862:	0003      	movs	r3, r0
 8001864:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001868:	f7ff fc08 	bl	800107c <HAL_GetTick>
 800186c:	0002      	movs	r2, r0
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e229      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	2380      	movs	r3, #128	@ 0x80
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4013      	ands	r3, r2
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001886:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	4a10      	ldr	r2, [pc, #64]	@ (80018cc <HAL_RCC_OscConfig+0x370>)
 800188c:	4013      	ands	r3, r2
 800188e:	0019      	movs	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 8001896:	430a      	orrs	r2, r1
 8001898:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800189a:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	021b      	lsls	r3, r3, #8
 80018a0:	0a19      	lsrs	r1, r3, #8
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	061a      	lsls	r2, r3, #24
 80018a8:	4b01      	ldr	r3, [pc, #4]	@ (80018b0 <HAL_RCC_OscConfig+0x354>)
 80018aa:	430a      	orrs	r2, r1
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	e029      	b.n	8001904 <HAL_RCC_OscConfig+0x3a8>
 80018b0:	40021000 	.word	0x40021000
 80018b4:	fffeffff 	.word	0xfffeffff
 80018b8:	fffbffff 	.word	0xfffbffff
 80018bc:	ffffe0ff 	.word	0xffffe0ff
 80018c0:	08003d24 	.word	0x08003d24
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000004 	.word	0x20000004
 80018cc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018d0:	4bbd      	ldr	r3, [pc, #756]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4bbc      	ldr	r3, [pc, #752]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 80018d6:	49bd      	ldr	r1, [pc, #756]	@ (8001bcc <HAL_RCC_OscConfig+0x670>)
 80018d8:	400a      	ands	r2, r1
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fbce 	bl	800107c <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018e6:	f7ff fbc9 	bl	800107c <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1ea      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80018f8:	4bb3      	ldr	r3, [pc, #716]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2380      	movs	r3, #128	@ 0x80
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4013      	ands	r3, r2
 8001902:	d1f0      	bne.n	80018e6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2208      	movs	r2, #8
 800190a:	4013      	ands	r3, r2
 800190c:	d036      	beq.n	800197c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d019      	beq.n	800194a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001916:	4bac      	ldr	r3, [pc, #688]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001918:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800191a:	4bab      	ldr	r3, [pc, #684]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 800191c:	2101      	movs	r1, #1
 800191e:	430a      	orrs	r2, r1
 8001920:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001922:	f7ff fbab 	bl	800107c <HAL_GetTick>
 8001926:	0003      	movs	r3, r0
 8001928:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192c:	f7ff fba6 	bl	800107c <HAL_GetTick>
 8001930:	0002      	movs	r2, r0
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e1c7      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800193e:	4ba2      	ldr	r3, [pc, #648]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001940:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001942:	2202      	movs	r2, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d0f1      	beq.n	800192c <HAL_RCC_OscConfig+0x3d0>
 8001948:	e018      	b.n	800197c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800194a:	4b9f      	ldr	r3, [pc, #636]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 800194c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800194e:	4b9e      	ldr	r3, [pc, #632]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001950:	2101      	movs	r1, #1
 8001952:	438a      	bics	r2, r1
 8001954:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7ff fb91 	bl	800107c <HAL_GetTick>
 800195a:	0003      	movs	r3, r0
 800195c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001960:	f7ff fb8c 	bl	800107c <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1ad      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001972:	4b95      	ldr	r3, [pc, #596]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	d1f1      	bne.n	8001960 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2204      	movs	r2, #4
 8001982:	4013      	ands	r3, r2
 8001984:	d100      	bne.n	8001988 <HAL_RCC_OscConfig+0x42c>
 8001986:	e0ae      	b.n	8001ae6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001988:	2027      	movs	r0, #39	@ 0x27
 800198a:	183b      	adds	r3, r7, r0
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001990:	4b8d      	ldr	r3, [pc, #564]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001992:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	055b      	lsls	r3, r3, #21
 8001998:	4013      	ands	r3, r2
 800199a:	d109      	bne.n	80019b0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	4b8a      	ldr	r3, [pc, #552]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 800199e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80019a0:	4b89      	ldr	r3, [pc, #548]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	0549      	lsls	r1, r1, #21
 80019a6:	430a      	orrs	r2, r1
 80019a8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80019aa:	183b      	adds	r3, r7, r0
 80019ac:	2201      	movs	r2, #1
 80019ae:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	4b87      	ldr	r3, [pc, #540]	@ (8001bd0 <HAL_RCC_OscConfig+0x674>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2380      	movs	r3, #128	@ 0x80
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4013      	ands	r3, r2
 80019ba:	d11a      	bne.n	80019f2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019bc:	4b84      	ldr	r3, [pc, #528]	@ (8001bd0 <HAL_RCC_OscConfig+0x674>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	4b83      	ldr	r3, [pc, #524]	@ (8001bd0 <HAL_RCC_OscConfig+0x674>)
 80019c2:	2180      	movs	r1, #128	@ 0x80
 80019c4:	0049      	lsls	r1, r1, #1
 80019c6:	430a      	orrs	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ca:	f7ff fb57 	bl	800107c <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d4:	f7ff fb52 	bl	800107c <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b64      	cmp	r3, #100	@ 0x64
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e173      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e6:	4b7a      	ldr	r3, [pc, #488]	@ (8001bd0 <HAL_RCC_OscConfig+0x674>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2380      	movs	r3, #128	@ 0x80
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4013      	ands	r3, r2
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	2380      	movs	r3, #128	@ 0x80
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_OscConfig+0x4b2>
 80019fe:	4b72      	ldr	r3, [pc, #456]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a02:	4b71      	ldr	r3, [pc, #452]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a04:	2180      	movs	r1, #128	@ 0x80
 8001a06:	0049      	lsls	r1, r1, #1
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a0c:	e031      	b.n	8001a72 <HAL_RCC_OscConfig+0x516>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4d4>
 8001a16:	4b6c      	ldr	r3, [pc, #432]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a1a:	4b6b      	ldr	r3, [pc, #428]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a1c:	496b      	ldr	r1, [pc, #428]	@ (8001bcc <HAL_RCC_OscConfig+0x670>)
 8001a1e:	400a      	ands	r2, r1
 8001a20:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a22:	4b69      	ldr	r3, [pc, #420]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a26:	4b68      	ldr	r3, [pc, #416]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a28:	496a      	ldr	r1, [pc, #424]	@ (8001bd4 <HAL_RCC_OscConfig+0x678>)
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a2e:	e020      	b.n	8001a72 <HAL_RCC_OscConfig+0x516>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	23a0      	movs	r3, #160	@ 0xa0
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d10e      	bne.n	8001a5a <HAL_RCC_OscConfig+0x4fe>
 8001a3c:	4b62      	ldr	r3, [pc, #392]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a40:	4b61      	ldr	r3, [pc, #388]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a42:	2180      	movs	r1, #128	@ 0x80
 8001a44:	00c9      	lsls	r1, r1, #3
 8001a46:	430a      	orrs	r2, r1
 8001a48:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a4a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a50:	2180      	movs	r1, #128	@ 0x80
 8001a52:	0049      	lsls	r1, r1, #1
 8001a54:	430a      	orrs	r2, r1
 8001a56:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a58:	e00b      	b.n	8001a72 <HAL_RCC_OscConfig+0x516>
 8001a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a60:	495a      	ldr	r1, [pc, #360]	@ (8001bcc <HAL_RCC_OscConfig+0x670>)
 8001a62:	400a      	ands	r2, r1
 8001a64:	651a      	str	r2, [r3, #80]	@ 0x50
 8001a66:	4b58      	ldr	r3, [pc, #352]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a6a:	4b57      	ldr	r3, [pc, #348]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a6c:	4959      	ldr	r1, [pc, #356]	@ (8001bd4 <HAL_RCC_OscConfig+0x678>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d015      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff faff 	bl	800107c <HAL_GetTick>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a82:	e009      	b.n	8001a98 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff fafa 	bl	800107c <HAL_GetTick>
 8001a88:	0002      	movs	r2, r0
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	4a52      	ldr	r2, [pc, #328]	@ (8001bd8 <HAL_RCC_OscConfig+0x67c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e11a      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a98:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001a9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001a9c:	2380      	movs	r3, #128	@ 0x80
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d0ef      	beq.n	8001a84 <HAL_RCC_OscConfig+0x528>
 8001aa4:	e014      	b.n	8001ad0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff fae9 	bl	800107c <HAL_GetTick>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001aae:	e009      	b.n	8001ac4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fae4 	bl	800107c <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	4a47      	ldr	r2, [pc, #284]	@ (8001bd8 <HAL_RCC_OscConfig+0x67c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e104      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ac4:	4b40      	ldr	r3, [pc, #256]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001ac6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ac8:	2380      	movs	r3, #128	@ 0x80
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4013      	ands	r3, r2
 8001ace:	d1ef      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ad0:	2327      	movs	r3, #39	@ 0x27
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d105      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ada:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001adc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ade:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001ae0:	493e      	ldr	r1, [pc, #248]	@ (8001bdc <HAL_RCC_OscConfig+0x680>)
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2220      	movs	r2, #32
 8001aec:	4013      	ands	r3, r2
 8001aee:	d049      	beq.n	8001b84 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d026      	beq.n	8001b46 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001af8:	4b33      	ldr	r3, [pc, #204]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	4b32      	ldr	r3, [pc, #200]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001afe:	2101      	movs	r1, #1
 8001b00:	430a      	orrs	r2, r1
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	4b30      	ldr	r3, [pc, #192]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001b06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b08:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b10:	4b33      	ldr	r3, [pc, #204]	@ (8001be0 <HAL_RCC_OscConfig+0x684>)
 8001b12:	6a1a      	ldr	r2, [r3, #32]
 8001b14:	4b32      	ldr	r3, [pc, #200]	@ (8001be0 <HAL_RCC_OscConfig+0x684>)
 8001b16:	2180      	movs	r1, #128	@ 0x80
 8001b18:	0189      	lsls	r1, r1, #6
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff faad 	bl	800107c <HAL_GetTick>
 8001b22:	0003      	movs	r3, r0
 8001b24:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b28:	f7ff faa8 	bl	800107c <HAL_GetTick>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e0c9      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b3a:	4b23      	ldr	r3, [pc, #140]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	d0f1      	beq.n	8001b28 <HAL_RCC_OscConfig+0x5cc>
 8001b44:	e01e      	b.n	8001b84 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001b46:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	438a      	bics	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	4b23      	ldr	r3, [pc, #140]	@ (8001be0 <HAL_RCC_OscConfig+0x684>)
 8001b54:	6a1a      	ldr	r2, [r3, #32]
 8001b56:	4b22      	ldr	r3, [pc, #136]	@ (8001be0 <HAL_RCC_OscConfig+0x684>)
 8001b58:	4922      	ldr	r1, [pc, #136]	@ (8001be4 <HAL_RCC_OscConfig+0x688>)
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff fa8d 	bl	800107c <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b68:	f7ff fa88 	bl	800107c <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e0a9      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2202      	movs	r2, #2
 8001b80:	4013      	ands	r3, r2
 8001b82:	d1f1      	bne.n	8001b68 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d100      	bne.n	8001b8e <HAL_RCC_OscConfig+0x632>
 8001b8c:	e09e      	b.n	8001ccc <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	2b0c      	cmp	r3, #12
 8001b92:	d100      	bne.n	8001b96 <HAL_RCC_OscConfig+0x63a>
 8001b94:	e077      	b.n	8001c86 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d158      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4b09      	ldr	r3, [pc, #36]	@ (8001bc8 <HAL_RCC_OscConfig+0x66c>)
 8001ba4:	4910      	ldr	r1, [pc, #64]	@ (8001be8 <HAL_RCC_OscConfig+0x68c>)
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7ff fa67 	bl	800107c <HAL_GetTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bb2:	e01b      	b.n	8001bec <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff fa62 	bl	800107c <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d914      	bls.n	8001bec <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e083      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
 8001bc6:	46c0      	nop			@ (mov r8, r8)
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	fffffeff 	.word	0xfffffeff
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	fffffbff 	.word	0xfffffbff
 8001bd8:	00001388 	.word	0x00001388
 8001bdc:	efffffff 	.word	0xefffffff
 8001be0:	40010000 	.word	0x40010000
 8001be4:	ffffdfff 	.word	0xffffdfff
 8001be8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001bec:	4b3a      	ldr	r3, [pc, #232]	@ (8001cd8 <HAL_RCC_OscConfig+0x77c>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	049b      	lsls	r3, r3, #18
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d1dd      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf8:	4b37      	ldr	r3, [pc, #220]	@ (8001cd8 <HAL_RCC_OscConfig+0x77c>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a37      	ldr	r2, [pc, #220]	@ (8001cdc <HAL_RCC_OscConfig+0x780>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c10:	431a      	orrs	r2, r3
 8001c12:	4b31      	ldr	r3, [pc, #196]	@ (8001cd8 <HAL_RCC_OscConfig+0x77c>)
 8001c14:	430a      	orrs	r2, r1
 8001c16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd8 <HAL_RCC_OscConfig+0x77c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd8 <HAL_RCC_OscConfig+0x77c>)
 8001c1e:	2180      	movs	r1, #128	@ 0x80
 8001c20:	0449      	lsls	r1, r1, #17
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c26:	f7ff fa29 	bl	800107c <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff fa24 	bl	800107c <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e045      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c42:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <HAL_RCC_OscConfig+0x77c>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	2380      	movs	r3, #128	@ 0x80
 8001c48:	049b      	lsls	r3, r3, #18
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x6d4>
 8001c4e:	e03d      	b.n	8001ccc <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c50:	4b21      	ldr	r3, [pc, #132]	@ (8001cd8 <HAL_RCC_OscConfig+0x77c>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <HAL_RCC_OscConfig+0x77c>)
 8001c56:	4922      	ldr	r1, [pc, #136]	@ (8001ce0 <HAL_RCC_OscConfig+0x784>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fa0e 	bl	800107c <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff fa09 	bl	800107c <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e02a      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c78:	4b17      	ldr	r3, [pc, #92]	@ (8001cd8 <HAL_RCC_OscConfig+0x77c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	049b      	lsls	r3, r3, #18
 8001c80:	4013      	ands	r3, r2
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x70a>
 8001c84:	e022      	b.n	8001ccc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e01d      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c92:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <HAL_RCC_OscConfig+0x77c>)
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	025b      	lsls	r3, r3, #9
 8001c9e:	401a      	ands	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d10f      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ca8:	69fa      	ldr	r2, [r7, #28]
 8001caa:	23f0      	movs	r3, #240	@ 0xf0
 8001cac:	039b      	lsls	r3, r3, #14
 8001cae:	401a      	ands	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d107      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	23c0      	movs	r3, #192	@ 0xc0
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d001      	beq.n	8001ccc <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b00a      	add	sp, #40	@ 0x28
 8001cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd6:	46c0      	nop			@ (mov r8, r8)
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	ff02ffff 	.word	0xff02ffff
 8001ce0:	feffffff 	.word	0xfeffffff

08001ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce4:	b5b0      	push	{r4, r5, r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e128      	b.n	8001f4a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b96      	ldr	r3, [pc, #600]	@ (8001f54 <HAL_RCC_ClockConfig+0x270>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	4013      	ands	r3, r2
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d91e      	bls.n	8001d44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b93      	ldr	r3, [pc, #588]	@ (8001f54 <HAL_RCC_ClockConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	4393      	bics	r3, r2
 8001d0e:	0019      	movs	r1, r3
 8001d10:	4b90      	ldr	r3, [pc, #576]	@ (8001f54 <HAL_RCC_ClockConfig+0x270>)
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d18:	f7ff f9b0 	bl	800107c <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d20:	e009      	b.n	8001d36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d22:	f7ff f9ab 	bl	800107c <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	4a8a      	ldr	r2, [pc, #552]	@ (8001f58 <HAL_RCC_ClockConfig+0x274>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e109      	b.n	8001f4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b87      	ldr	r3, [pc, #540]	@ (8001f54 <HAL_RCC_ClockConfig+0x270>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1ee      	bne.n	8001d22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	d009      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4e:	4b83      	ldr	r3, [pc, #524]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	22f0      	movs	r2, #240	@ 0xf0
 8001d54:	4393      	bics	r3, r2
 8001d56:	0019      	movs	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	4b7f      	ldr	r3, [pc, #508]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d100      	bne.n	8001d6e <HAL_RCC_ClockConfig+0x8a>
 8001d6c:	e089      	b.n	8001e82 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d76:	4b79      	ldr	r3, [pc, #484]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	2380      	movs	r3, #128	@ 0x80
 8001d7c:	029b      	lsls	r3, r3, #10
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d120      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0e1      	b.n	8001f4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d8e:	4b73      	ldr	r3, [pc, #460]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	@ 0x80
 8001d94:	049b      	lsls	r3, r3, #18
 8001d96:	4013      	ands	r3, r2
 8001d98:	d114      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0d5      	b.n	8001f4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d106      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da6:	4b6d      	ldr	r3, [pc, #436]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2204      	movs	r2, #4
 8001dac:	4013      	ands	r3, r2
 8001dae:	d109      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0ca      	b.n	8001f4a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001db4:	4b69      	ldr	r3, [pc, #420]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0c2      	b.n	8001f4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc4:	4b65      	ldr	r3, [pc, #404]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	4393      	bics	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4b62      	ldr	r3, [pc, #392]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd8:	f7ff f950 	bl	800107c <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d111      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001de8:	e009      	b.n	8001dfe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dea:	f7ff f947 	bl	800107c <HAL_GetTick>
 8001dee:	0002      	movs	r2, r0
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	4a58      	ldr	r2, [pc, #352]	@ (8001f58 <HAL_RCC_ClockConfig+0x274>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e0a5      	b.n	8001f4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dfe:	4b57      	ldr	r3, [pc, #348]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	220c      	movs	r2, #12
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d1ef      	bne.n	8001dea <HAL_RCC_ClockConfig+0x106>
 8001e0a:	e03a      	b.n	8001e82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d111      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e14:	e009      	b.n	8001e2a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e16:	f7ff f931 	bl	800107c <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	4a4d      	ldr	r2, [pc, #308]	@ (8001f58 <HAL_RCC_ClockConfig+0x274>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e08f      	b.n	8001f4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	220c      	movs	r2, #12
 8001e30:	4013      	ands	r3, r2
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d1ef      	bne.n	8001e16 <HAL_RCC_ClockConfig+0x132>
 8001e36:	e024      	b.n	8001e82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d11b      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e40:	e009      	b.n	8001e56 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e42:	f7ff f91b 	bl	800107c <HAL_GetTick>
 8001e46:	0002      	movs	r2, r0
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	4a42      	ldr	r2, [pc, #264]	@ (8001f58 <HAL_RCC_ClockConfig+0x274>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e079      	b.n	8001f4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e56:	4b41      	ldr	r3, [pc, #260]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	d1ef      	bne.n	8001e42 <HAL_RCC_ClockConfig+0x15e>
 8001e62:	e00e      	b.n	8001e82 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e64:	f7ff f90a 	bl	800107c <HAL_GetTick>
 8001e68:	0002      	movs	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	4a3a      	ldr	r2, [pc, #232]	@ (8001f58 <HAL_RCC_ClockConfig+0x274>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e068      	b.n	8001f4a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e78:	4b38      	ldr	r3, [pc, #224]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	220c      	movs	r2, #12
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e82:	4b34      	ldr	r3, [pc, #208]	@ (8001f54 <HAL_RCC_ClockConfig+0x270>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2201      	movs	r2, #1
 8001e88:	4013      	ands	r3, r2
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d21e      	bcs.n	8001ece <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e90:	4b30      	ldr	r3, [pc, #192]	@ (8001f54 <HAL_RCC_ClockConfig+0x270>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2201      	movs	r2, #1
 8001e96:	4393      	bics	r3, r2
 8001e98:	0019      	movs	r1, r3
 8001e9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001f54 <HAL_RCC_ClockConfig+0x270>)
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ea2:	f7ff f8eb 	bl	800107c <HAL_GetTick>
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	e009      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eac:	f7ff f8e6 	bl	800107c <HAL_GetTick>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	4a28      	ldr	r2, [pc, #160]	@ (8001f58 <HAL_RCC_ClockConfig+0x274>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e044      	b.n	8001f4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec0:	4b24      	ldr	r3, [pc, #144]	@ (8001f54 <HAL_RCC_ClockConfig+0x270>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d1ee      	bne.n	8001eac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	d009      	beq.n	8001eec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ed8:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4a20      	ldr	r2, [pc, #128]	@ (8001f60 <HAL_RCC_ClockConfig+0x27c>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d00a      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ef6:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	4a1a      	ldr	r2, [pc, #104]	@ (8001f64 <HAL_RCC_ClockConfig+0x280>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	0019      	movs	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	00da      	lsls	r2, r3, #3
 8001f06:	4b15      	ldr	r3, [pc, #84]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f0c:	f000 f832 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f10:	0001      	movs	r1, r0
 8001f12:	4b12      	ldr	r3, [pc, #72]	@ (8001f5c <HAL_RCC_ClockConfig+0x278>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	220f      	movs	r2, #15
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <HAL_RCC_ClockConfig+0x284>)
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	000a      	movs	r2, r1
 8001f22:	40da      	lsrs	r2, r3
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_RCC_ClockConfig+0x288>)
 8001f26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <HAL_RCC_ClockConfig+0x28c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	250b      	movs	r5, #11
 8001f2e:	197c      	adds	r4, r7, r5
 8001f30:	0018      	movs	r0, r3
 8001f32:	f7fe ff93 	bl	8000e5c <HAL_InitTick>
 8001f36:	0003      	movs	r3, r0
 8001f38:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f3a:	197b      	adds	r3, r7, r5
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f42:	197b      	adds	r3, r7, r5
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	b004      	add	sp, #16
 8001f50:	bdb0      	pop	{r4, r5, r7, pc}
 8001f52:	46c0      	nop			@ (mov r8, r8)
 8001f54:	40022000 	.word	0x40022000
 8001f58:	00001388 	.word	0x00001388
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	fffff8ff 	.word	0xfffff8ff
 8001f64:	ffffc7ff 	.word	0xffffc7ff
 8001f68:	08003d24 	.word	0x08003d24
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	20000004 	.word	0x20000004

08001f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800206c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	220c      	movs	r2, #12
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b0c      	cmp	r3, #12
 8001f88:	d013      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x3e>
 8001f8a:	d85c      	bhi.n	8002046 <HAL_RCC_GetSysClockFreq+0xd2>
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d002      	beq.n	8001f96 <HAL_RCC_GetSysClockFreq+0x22>
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d00b      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0x38>
 8001f94:	e057      	b.n	8002046 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f96:	4b35      	ldr	r3, [pc, #212]	@ (800206c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2210      	movs	r2, #16
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d002      	beq.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001fa0:	4b33      	ldr	r3, [pc, #204]	@ (8002070 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fa2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001fa4:	e05d      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8001fa6:	4b33      	ldr	r3, [pc, #204]	@ (8002074 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fa8:	613b      	str	r3, [r7, #16]
      break;
 8001faa:	e05a      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fac:	4b32      	ldr	r3, [pc, #200]	@ (8002078 <HAL_RCC_GetSysClockFreq+0x104>)
 8001fae:	613b      	str	r3, [r7, #16]
      break;
 8001fb0:	e057      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	0c9b      	lsrs	r3, r3, #18
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	4013      	ands	r3, r2
 8001fba:	4a30      	ldr	r2, [pc, #192]	@ (800207c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbc:	5cd3      	ldrb	r3, [r2, r3]
 8001fbe:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	0d9b      	lsrs	r3, r3, #22
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	3301      	adds	r3, #1
 8001fca:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fcc:	4b27      	ldr	r3, [pc, #156]	@ (800206c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	2380      	movs	r3, #128	@ 0x80
 8001fd2:	025b      	lsls	r3, r3, #9
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d00f      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	000a      	movs	r2, r1
 8001fdc:	0152      	lsls	r2, r2, #5
 8001fde:	1a52      	subs	r2, r2, r1
 8001fe0:	0193      	lsls	r3, r2, #6
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	185b      	adds	r3, r3, r1
 8001fe8:	025b      	lsls	r3, r3, #9
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	0018      	movs	r0, r3
 8001fee:	f7fe f88b 	bl	8000108 <__udivsi3>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e023      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2210      	movs	r2, #16
 8001ffe:	4013      	ands	r3, r2
 8002000:	d00f      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	000a      	movs	r2, r1
 8002006:	0152      	lsls	r2, r2, #5
 8002008:	1a52      	subs	r2, r2, r1
 800200a:	0193      	lsls	r3, r2, #6
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	185b      	adds	r3, r3, r1
 8002012:	021b      	lsls	r3, r3, #8
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	0018      	movs	r0, r3
 8002018:	f7fe f876 	bl	8000108 <__udivsi3>
 800201c:	0003      	movs	r3, r0
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	e00e      	b.n	8002040 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002022:	68b9      	ldr	r1, [r7, #8]
 8002024:	000a      	movs	r2, r1
 8002026:	0152      	lsls	r2, r2, #5
 8002028:	1a52      	subs	r2, r2, r1
 800202a:	0193      	lsls	r3, r2, #6
 800202c:	1a9b      	subs	r3, r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	185b      	adds	r3, r3, r1
 8002032:	029b      	lsls	r3, r3, #10
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	0018      	movs	r0, r3
 8002038:	f7fe f866 	bl	8000108 <__udivsi3>
 800203c:	0003      	movs	r3, r0
 800203e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
      break;
 8002044:	e00d      	b.n	8002062 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	0b5b      	lsrs	r3, r3, #13
 800204c:	2207      	movs	r2, #7
 800204e:	4013      	ands	r3, r2
 8002050:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	2280      	movs	r2, #128	@ 0x80
 8002058:	0212      	lsls	r2, r2, #8
 800205a:	409a      	lsls	r2, r3
 800205c:	0013      	movs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
      break;
 8002060:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002062:	693b      	ldr	r3, [r7, #16]
}
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	b006      	add	sp, #24
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	003d0900 	.word	0x003d0900
 8002074:	00f42400 	.word	0x00f42400
 8002078:	007a1200 	.word	0x007a1200
 800207c:	08003d3c 	.word	0x08003d3c

08002080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002084:	4b02      	ldr	r3, [pc, #8]	@ (8002090 <HAL_RCC_GetHCLKFreq+0x10>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	20000000 	.word	0x20000000

08002094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002098:	f7ff fff2 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 800209c:	0001      	movs	r1, r0
 800209e:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	2207      	movs	r2, #7
 80020a6:	4013      	ands	r3, r2
 80020a8:	4a04      	ldr	r2, [pc, #16]	@ (80020bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	40d9      	lsrs	r1, r3
 80020ae:	000b      	movs	r3, r1
}
 80020b0:	0018      	movs	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			@ (mov r8, r8)
 80020b8:	40021000 	.word	0x40021000
 80020bc:	08003d34 	.word	0x08003d34

080020c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020c4:	f7ff ffdc 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020c8:	0001      	movs	r1, r0
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	0adb      	lsrs	r3, r3, #11
 80020d0:	2207      	movs	r2, #7
 80020d2:	4013      	ands	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	@ (80020e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020d6:	5cd3      	ldrb	r3, [r2, r3]
 80020d8:	40d9      	lsrs	r1, r3
 80020da:	000b      	movs	r3, r1
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	40021000 	.word	0x40021000
 80020e8:	08003d34 	.word	0x08003d34

080020ec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	220f      	movs	r2, #15
 80020fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_RCC_GetClockConfig+0x5c>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2203      	movs	r2, #3
 8002102:	401a      	ands	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002108:	4b0f      	ldr	r3, [pc, #60]	@ (8002148 <HAL_RCC_GetClockConfig+0x5c>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	22f0      	movs	r2, #240	@ 0xf0
 800210e:	401a      	ands	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002114:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <HAL_RCC_GetClockConfig+0x5c>)
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	23e0      	movs	r3, #224	@ 0xe0
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	401a      	ands	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002122:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <HAL_RCC_GetClockConfig+0x5c>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	23e0      	movs	r3, #224	@ 0xe0
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	401a      	ands	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002132:	4b06      	ldr	r3, [pc, #24]	@ (800214c <HAL_RCC_GetClockConfig+0x60>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2201      	movs	r2, #1
 8002138:	401a      	ands	r2, r3
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	601a      	str	r2, [r3, #0]
}
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	46bd      	mov	sp, r7
 8002142:	b002      	add	sp, #8
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	40021000 	.word	0x40021000
 800214c:	40022000 	.word	0x40022000

08002150 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002158:	2317      	movs	r3, #23
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2220      	movs	r2, #32
 8002166:	4013      	ands	r3, r2
 8002168:	d106      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	2380      	movs	r3, #128	@ 0x80
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	4013      	ands	r3, r2
 8002174:	d100      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002176:	e104      	b.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002178:	4bb1      	ldr	r3, [pc, #708]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800217a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800217c:	2380      	movs	r3, #128	@ 0x80
 800217e:	055b      	lsls	r3, r3, #21
 8002180:	4013      	ands	r3, r2
 8002182:	d10a      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	4bae      	ldr	r3, [pc, #696]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002188:	4bad      	ldr	r3, [pc, #692]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800218a:	2180      	movs	r1, #128	@ 0x80
 800218c:	0549      	lsls	r1, r1, #21
 800218e:	430a      	orrs	r2, r1
 8002190:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002192:	2317      	movs	r3, #23
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219a:	4baa      	ldr	r3, [pc, #680]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	2380      	movs	r3, #128	@ 0x80
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4013      	ands	r3, r2
 80021a4:	d11a      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a6:	4ba7      	ldr	r3, [pc, #668]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	4ba6      	ldr	r3, [pc, #664]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021ac:	2180      	movs	r1, #128	@ 0x80
 80021ae:	0049      	lsls	r1, r1, #1
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b4:	f7fe ff62 	bl	800107c <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7fe ff5d 	bl	800107c <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b64      	cmp	r3, #100	@ 0x64
 80021ca:	d901      	bls.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e133      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b9c      	ldr	r3, [pc, #624]	@ (8002444 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	2380      	movs	r3, #128	@ 0x80
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4013      	ands	r3, r2
 80021da:	d0f0      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80021dc:	4b98      	ldr	r3, [pc, #608]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	23c0      	movs	r3, #192	@ 0xc0
 80021e2:	039b      	lsls	r3, r3, #14
 80021e4:	4013      	ands	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	23c0      	movs	r3, #192	@ 0xc0
 80021ee:	039b      	lsls	r3, r3, #14
 80021f0:	4013      	ands	r3, r2
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d107      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	23c0      	movs	r3, #192	@ 0xc0
 80021fe:	039b      	lsls	r3, r3, #14
 8002200:	4013      	ands	r3, r2
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d013      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	23c0      	movs	r3, #192	@ 0xc0
 800220e:	029b      	lsls	r3, r3, #10
 8002210:	401a      	ands	r2, r3
 8002212:	23c0      	movs	r3, #192	@ 0xc0
 8002214:	029b      	lsls	r3, r3, #10
 8002216:	429a      	cmp	r2, r3
 8002218:	d10a      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800221a:	4b89      	ldr	r3, [pc, #548]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	@ 0x80
 8002220:	029b      	lsls	r3, r3, #10
 8002222:	401a      	ands	r2, r3
 8002224:	2380      	movs	r3, #128	@ 0x80
 8002226:	029b      	lsls	r3, r3, #10
 8002228:	429a      	cmp	r2, r3
 800222a:	d101      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e103      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002230:	4b83      	ldr	r3, [pc, #524]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002232:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002234:	23c0      	movs	r3, #192	@ 0xc0
 8002236:	029b      	lsls	r3, r3, #10
 8002238:	4013      	ands	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d049      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	23c0      	movs	r3, #192	@ 0xc0
 8002248:	029b      	lsls	r3, r3, #10
 800224a:	4013      	ands	r3, r2
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	429a      	cmp	r2, r3
 8002250:	d004      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2220      	movs	r2, #32
 8002258:	4013      	ands	r3, r2
 800225a:	d10d      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	23c0      	movs	r3, #192	@ 0xc0
 8002262:	029b      	lsls	r3, r3, #10
 8002264:	4013      	ands	r3, r2
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d034      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	4013      	ands	r3, r2
 8002276:	d02e      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002278:	4b71      	ldr	r3, [pc, #452]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800227a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800227c:	4a72      	ldr	r2, [pc, #456]	@ (8002448 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800227e:	4013      	ands	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002282:	4b6f      	ldr	r3, [pc, #444]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002284:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002286:	4b6e      	ldr	r3, [pc, #440]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002288:	2180      	movs	r1, #128	@ 0x80
 800228a:	0309      	lsls	r1, r1, #12
 800228c:	430a      	orrs	r2, r1
 800228e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002290:	4b6b      	ldr	r3, [pc, #428]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002292:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002294:	4b6a      	ldr	r3, [pc, #424]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002296:	496d      	ldr	r1, [pc, #436]	@ (800244c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002298:	400a      	ands	r2, r1
 800229a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800229c:	4b68      	ldr	r3, [pc, #416]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	2380      	movs	r3, #128	@ 0x80
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4013      	ands	r3, r2
 80022aa:	d014      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7fe fee6 	bl	800107c <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022b4:	e009      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7fe fee1 	bl	800107c <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	4a63      	ldr	r2, [pc, #396]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d901      	bls.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0b6      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80022ce:	2380      	movs	r3, #128	@ 0x80
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4013      	ands	r3, r2
 80022d4:	d0ef      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	2380      	movs	r3, #128	@ 0x80
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	4013      	ands	r3, r2
 80022e0:	d01f      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	23c0      	movs	r3, #192	@ 0xc0
 80022e8:	029b      	lsls	r3, r3, #10
 80022ea:	401a      	ands	r2, r3
 80022ec:	23c0      	movs	r3, #192	@ 0xc0
 80022ee:	029b      	lsls	r3, r3, #10
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d10c      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80022f4:	4b52      	ldr	r3, [pc, #328]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a56      	ldr	r2, [pc, #344]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022fa:	4013      	ands	r3, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	23c0      	movs	r3, #192	@ 0xc0
 8002304:	039b      	lsls	r3, r3, #14
 8002306:	401a      	ands	r2, r3
 8002308:	4b4d      	ldr	r3, [pc, #308]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800230a:	430a      	orrs	r2, r1
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	4b4c      	ldr	r3, [pc, #304]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002310:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	23c0      	movs	r3, #192	@ 0xc0
 8002318:	029b      	lsls	r3, r3, #10
 800231a:	401a      	ands	r2, r3
 800231c:	4b48      	ldr	r3, [pc, #288]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800231e:	430a      	orrs	r2, r1
 8002320:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2220      	movs	r2, #32
 8002328:	4013      	ands	r3, r2
 800232a:	d01f      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	23c0      	movs	r3, #192	@ 0xc0
 8002332:	029b      	lsls	r3, r3, #10
 8002334:	401a      	ands	r2, r3
 8002336:	23c0      	movs	r3, #192	@ 0xc0
 8002338:	029b      	lsls	r3, r3, #10
 800233a:	429a      	cmp	r2, r3
 800233c:	d10c      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800233e:	4b40      	ldr	r3, [pc, #256]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a44      	ldr	r2, [pc, #272]	@ (8002454 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002344:	4013      	ands	r3, r2
 8002346:	0019      	movs	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	23c0      	movs	r3, #192	@ 0xc0
 800234e:	039b      	lsls	r3, r3, #14
 8002350:	401a      	ands	r2, r3
 8002352:	4b3b      	ldr	r3, [pc, #236]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	4b39      	ldr	r3, [pc, #228]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800235a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	23c0      	movs	r3, #192	@ 0xc0
 8002362:	029b      	lsls	r3, r3, #10
 8002364:	401a      	ands	r2, r3
 8002366:	4b36      	ldr	r3, [pc, #216]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002368:	430a      	orrs	r2, r1
 800236a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800236c:	2317      	movs	r3, #23
 800236e:	18fb      	adds	r3, r7, r3
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d105      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002376:	4b32      	ldr	r3, [pc, #200]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002378:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800237a:	4b31      	ldr	r3, [pc, #196]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800237c:	4936      	ldr	r1, [pc, #216]	@ (8002458 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800237e:	400a      	ands	r2, r1
 8002380:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2201      	movs	r2, #1
 8002388:	4013      	ands	r3, r2
 800238a:	d009      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800238c:	4b2c      	ldr	r3, [pc, #176]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800238e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002390:	2203      	movs	r2, #3
 8002392:	4393      	bics	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	4b29      	ldr	r3, [pc, #164]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800239c:	430a      	orrs	r2, r1
 800239e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2202      	movs	r2, #2
 80023a6:	4013      	ands	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023aa:	4b25      	ldr	r3, [pc, #148]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ae:	220c      	movs	r2, #12
 80023b0:	4393      	bics	r3, r2
 80023b2:	0019      	movs	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	4b21      	ldr	r3, [pc, #132]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023ba:	430a      	orrs	r2, r1
 80023bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2204      	movs	r2, #4
 80023c4:	4013      	ands	r3, r2
 80023c6:	d009      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023cc:	4a23      	ldr	r2, [pc, #140]	@ (800245c <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695a      	ldr	r2, [r3, #20]
 80023d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2208      	movs	r2, #8
 80023e2:	4013      	ands	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023e6:	4b16      	ldr	r3, [pc, #88]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002460 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80023f6:	430a      	orrs	r2, r1
 80023f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2240      	movs	r2, #64	@ 0x40
 8002400:	4013      	ands	r3, r2
 8002402:	d009      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002404:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002408:	4a16      	ldr	r2, [pc, #88]	@ (8002464 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800240a:	4013      	ands	r3, r2
 800240c:	0019      	movs	r1, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1a      	ldr	r2, [r3, #32]
 8002412:	4b0b      	ldr	r3, [pc, #44]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002414:	430a      	orrs	r2, r1
 8002416:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2280      	movs	r2, #128	@ 0x80
 800241e:	4013      	ands	r3, r2
 8002420:	d009      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002422:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002426:	4a10      	ldr	r2, [pc, #64]	@ (8002468 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002428:	4013      	ands	r3, r2
 800242a:	0019      	movs	r1, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	4b03      	ldr	r3, [pc, #12]	@ (8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002432:	430a      	orrs	r2, r1
 8002434:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	0018      	movs	r0, r3
 800243a:	46bd      	mov	sp, r7
 800243c:	b006      	add	sp, #24
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40021000 	.word	0x40021000
 8002444:	40007000 	.word	0x40007000
 8002448:	fffcffff 	.word	0xfffcffff
 800244c:	fff7ffff 	.word	0xfff7ffff
 8002450:	00001388 	.word	0x00001388
 8002454:	ffcfffff 	.word	0xffcfffff
 8002458:	efffffff 	.word	0xefffffff
 800245c:	fffff3ff 	.word	0xfffff3ff
 8002460:	ffffcfff 	.word	0xffffcfff
 8002464:	fbffffff 	.word	0xfbffffff
 8002468:	fff3ffff 	.word	0xfff3ffff

0800246c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e032      	b.n	80024e4 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2239      	movs	r2, #57	@ 0x39
 8002482:	5c9b      	ldrb	r3, [r3, r2]
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d107      	bne.n	800249a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2238      	movs	r2, #56	@ 0x38
 800248e:	2100      	movs	r1, #0
 8002490:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	0018      	movs	r0, r3
 8002496:	f7fe fbfb 	bl	8000c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2239      	movs	r2, #57	@ 0x39
 800249e:	2102      	movs	r1, #2
 80024a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	0019      	movs	r1, r3
 80024ac:	0010      	movs	r0, r2
 80024ae:	f000 fc85 	bl	8002dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	223e      	movs	r2, #62	@ 0x3e
 80024b6:	2101      	movs	r1, #1
 80024b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	223a      	movs	r2, #58	@ 0x3a
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	223b      	movs	r2, #59	@ 0x3b
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	223c      	movs	r2, #60	@ 0x3c
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	223d      	movs	r2, #61	@ 0x3d
 80024d6:	2101      	movs	r1, #1
 80024d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2239      	movs	r2, #57	@ 0x39
 80024de:	2101      	movs	r1, #1
 80024e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	0018      	movs	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	b002      	add	sp, #8
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2239      	movs	r2, #57	@ 0x39
 80024f8:	5c9b      	ldrb	r3, [r3, r2]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d001      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e036      	b.n	8002572 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2239      	movs	r2, #57	@ 0x39
 8002508:	2102      	movs	r1, #2
 800250a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2101      	movs	r1, #1
 8002518:	430a      	orrs	r2, r1
 800251a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2380      	movs	r3, #128	@ 0x80
 8002522:	05db      	lsls	r3, r3, #23
 8002524:	429a      	cmp	r2, r3
 8002526:	d009      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x50>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a13      	ldr	r2, [pc, #76]	@ (800257c <HAL_TIM_Base_Start_IT+0x90>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_TIM_Base_Start_IT+0x50>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a12      	ldr	r2, [pc, #72]	@ (8002580 <HAL_TIM_Base_Start_IT+0x94>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d111      	bne.n	8002560 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2207      	movs	r2, #7
 8002544:	4013      	ands	r3, r2
 8002546:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2b06      	cmp	r3, #6
 800254c:	d010      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	430a      	orrs	r2, r1
 800255c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800255e:	e007      	b.n	8002570 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2101      	movs	r1, #1
 800256c:	430a      	orrs	r2, r1
 800256e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b004      	add	sp, #16
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			@ (mov r8, r8)
 800257c:	40010800 	.word	0x40010800
 8002580:	40011400 	.word	0x40011400

08002584 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e032      	b.n	80025fc <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2239      	movs	r2, #57	@ 0x39
 800259a:	5c9b      	ldrb	r3, [r3, r2]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d107      	bne.n	80025b2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2238      	movs	r2, #56	@ 0x38
 80025a6:	2100      	movs	r1, #0
 80025a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	0018      	movs	r0, r3
 80025ae:	f000 f829 	bl	8002604 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2239      	movs	r2, #57	@ 0x39
 80025b6:	2102      	movs	r1, #2
 80025b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3304      	adds	r3, #4
 80025c2:	0019      	movs	r1, r3
 80025c4:	0010      	movs	r0, r2
 80025c6:	f000 fbf9 	bl	8002dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	223e      	movs	r2, #62	@ 0x3e
 80025ce:	2101      	movs	r1, #1
 80025d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	223a      	movs	r2, #58	@ 0x3a
 80025d6:	2101      	movs	r1, #1
 80025d8:	5499      	strb	r1, [r3, r2]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	223b      	movs	r2, #59	@ 0x3b
 80025de:	2101      	movs	r1, #1
 80025e0:	5499      	strb	r1, [r3, r2]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	223c      	movs	r2, #60	@ 0x3c
 80025e6:	2101      	movs	r1, #1
 80025e8:	5499      	strb	r1, [r3, r2]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	223d      	movs	r2, #61	@ 0x3d
 80025ee:	2101      	movs	r1, #1
 80025f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2239      	movs	r2, #57	@ 0x39
 80025f6:	2101      	movs	r1, #1
 80025f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	b002      	add	sp, #8
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800260c:	46c0      	nop			@ (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800261e:	230f      	movs	r3, #15
 8002620:	18fb      	adds	r3, r7, r3
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d108      	bne.n	800263e <HAL_TIM_PWM_Start_IT+0x2a>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	223a      	movs	r2, #58	@ 0x3a
 8002630:	5c9b      	ldrb	r3, [r3, r2]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	1e5a      	subs	r2, r3, #1
 8002638:	4193      	sbcs	r3, r2
 800263a:	b2db      	uxtb	r3, r3
 800263c:	e01f      	b.n	800267e <HAL_TIM_PWM_Start_IT+0x6a>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b04      	cmp	r3, #4
 8002642:	d108      	bne.n	8002656 <HAL_TIM_PWM_Start_IT+0x42>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	223b      	movs	r2, #59	@ 0x3b
 8002648:	5c9b      	ldrb	r3, [r3, r2]
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	1e5a      	subs	r2, r3, #1
 8002650:	4193      	sbcs	r3, r2
 8002652:	b2db      	uxtb	r3, r3
 8002654:	e013      	b.n	800267e <HAL_TIM_PWM_Start_IT+0x6a>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b08      	cmp	r3, #8
 800265a:	d108      	bne.n	800266e <HAL_TIM_PWM_Start_IT+0x5a>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	223c      	movs	r2, #60	@ 0x3c
 8002660:	5c9b      	ldrb	r3, [r3, r2]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	1e5a      	subs	r2, r3, #1
 8002668:	4193      	sbcs	r3, r2
 800266a:	b2db      	uxtb	r3, r3
 800266c:	e007      	b.n	800267e <HAL_TIM_PWM_Start_IT+0x6a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	223d      	movs	r2, #61	@ 0x3d
 8002672:	5c9b      	ldrb	r3, [r3, r2]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	3b01      	subs	r3, #1
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	4193      	sbcs	r3, r2
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e090      	b.n	80027a8 <HAL_TIM_PWM_Start_IT+0x194>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d104      	bne.n	8002696 <HAL_TIM_PWM_Start_IT+0x82>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	223a      	movs	r2, #58	@ 0x3a
 8002690:	2102      	movs	r1, #2
 8002692:	5499      	strb	r1, [r3, r2]
 8002694:	e013      	b.n	80026be <HAL_TIM_PWM_Start_IT+0xaa>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b04      	cmp	r3, #4
 800269a:	d104      	bne.n	80026a6 <HAL_TIM_PWM_Start_IT+0x92>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	223b      	movs	r2, #59	@ 0x3b
 80026a0:	2102      	movs	r1, #2
 80026a2:	5499      	strb	r1, [r3, r2]
 80026a4:	e00b      	b.n	80026be <HAL_TIM_PWM_Start_IT+0xaa>
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d104      	bne.n	80026b6 <HAL_TIM_PWM_Start_IT+0xa2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	223c      	movs	r2, #60	@ 0x3c
 80026b0:	2102      	movs	r1, #2
 80026b2:	5499      	strb	r1, [r3, r2]
 80026b4:	e003      	b.n	80026be <HAL_TIM_PWM_Start_IT+0xaa>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	223d      	movs	r2, #61	@ 0x3d
 80026ba:	2102      	movs	r1, #2
 80026bc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b0c      	cmp	r3, #12
 80026c2:	d02a      	beq.n	800271a <HAL_TIM_PWM_Start_IT+0x106>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d830      	bhi.n	800272c <HAL_TIM_PWM_Start_IT+0x118>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d01b      	beq.n	8002708 <HAL_TIM_PWM_Start_IT+0xf4>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d82a      	bhi.n	800272c <HAL_TIM_PWM_Start_IT+0x118>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_TIM_PWM_Start_IT+0xd0>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d009      	beq.n	80026f6 <HAL_TIM_PWM_Start_IT+0xe2>
 80026e2:	e023      	b.n	800272c <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2102      	movs	r1, #2
 80026f0:	430a      	orrs	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]
      break;
 80026f4:	e01f      	b.n	8002736 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2104      	movs	r1, #4
 8002702:	430a      	orrs	r2, r1
 8002704:	60da      	str	r2, [r3, #12]
      break;
 8002706:	e016      	b.n	8002736 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2108      	movs	r1, #8
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]
      break;
 8002718:	e00d      	b.n	8002736 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2110      	movs	r1, #16
 8002726:	430a      	orrs	r2, r1
 8002728:	60da      	str	r2, [r3, #12]
      break;
 800272a:	e004      	b.n	8002736 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 800272c:	230f      	movs	r3, #15
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	2201      	movs	r2, #1
 8002732:	701a      	strb	r2, [r3, #0]
      break;
 8002734:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002736:	230f      	movs	r3, #15
 8002738:	18fb      	adds	r3, r7, r3
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d130      	bne.n	80027a2 <HAL_TIM_PWM_Start_IT+0x18e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6839      	ldr	r1, [r7, #0]
 8002746:	2201      	movs	r2, #1
 8002748:	0018      	movs	r0, r3
 800274a:	f000 fd2f 	bl	80031ac <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	2380      	movs	r3, #128	@ 0x80
 8002754:	05db      	lsls	r3, r3, #23
 8002756:	429a      	cmp	r2, r3
 8002758:	d009      	beq.n	800276e <HAL_TIM_PWM_Start_IT+0x15a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a14      	ldr	r2, [pc, #80]	@ (80027b0 <HAL_TIM_PWM_Start_IT+0x19c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d004      	beq.n	800276e <HAL_TIM_PWM_Start_IT+0x15a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a12      	ldr	r2, [pc, #72]	@ (80027b4 <HAL_TIM_PWM_Start_IT+0x1a0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d111      	bne.n	8002792 <HAL_TIM_PWM_Start_IT+0x17e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2207      	movs	r2, #7
 8002776:	4013      	ands	r3, r2
 8002778:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2b06      	cmp	r3, #6
 800277e:	d010      	beq.n	80027a2 <HAL_TIM_PWM_Start_IT+0x18e>
      {
        __HAL_TIM_ENABLE(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2101      	movs	r1, #1
 800278c:	430a      	orrs	r2, r1
 800278e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002790:	e007      	b.n	80027a2 <HAL_TIM_PWM_Start_IT+0x18e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2101      	movs	r1, #1
 800279e:	430a      	orrs	r2, r1
 80027a0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80027a2:	230f      	movs	r3, #15
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	781b      	ldrb	r3, [r3, #0]
}
 80027a8:	0018      	movs	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b004      	add	sp, #16
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40010800 	.word	0x40010800
 80027b4:	40011400 	.word	0x40011400

080027b8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	230f      	movs	r3, #15
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d02a      	beq.n	8002826 <HAL_TIM_PWM_Stop_IT+0x6e>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d830      	bhi.n	8002838 <HAL_TIM_PWM_Stop_IT+0x80>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d01b      	beq.n	8002814 <HAL_TIM_PWM_Stop_IT+0x5c>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d82a      	bhi.n	8002838 <HAL_TIM_PWM_Stop_IT+0x80>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_TIM_PWM_Stop_IT+0x38>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d009      	beq.n	8002802 <HAL_TIM_PWM_Stop_IT+0x4a>
 80027ee:	e023      	b.n	8002838 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2102      	movs	r1, #2
 80027fc:	438a      	bics	r2, r1
 80027fe:	60da      	str	r2, [r3, #12]
      break;
 8002800:	e01f      	b.n	8002842 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2104      	movs	r1, #4
 800280e:	438a      	bics	r2, r1
 8002810:	60da      	str	r2, [r3, #12]
      break;
 8002812:	e016      	b.n	8002842 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2108      	movs	r1, #8
 8002820:	438a      	bics	r2, r1
 8002822:	60da      	str	r2, [r3, #12]
      break;
 8002824:	e00d      	b.n	8002842 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68da      	ldr	r2, [r3, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2110      	movs	r1, #16
 8002832:	438a      	bics	r2, r1
 8002834:	60da      	str	r2, [r3, #12]
      break;
 8002836:	e004      	b.n	8002842 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8002838:	230f      	movs	r3, #15
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
      break;
 8002840:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002842:	230f      	movs	r3, #15
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d130      	bne.n	80028ae <HAL_TIM_PWM_Stop_IT+0xf6>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	0018      	movs	r0, r3
 8002856:	f000 fca9 	bl	80031ac <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4a16      	ldr	r2, [pc, #88]	@ (80028bc <HAL_TIM_PWM_Stop_IT+0x104>)
 8002862:	4013      	ands	r3, r2
 8002864:	d107      	bne.n	8002876 <HAL_TIM_PWM_Stop_IT+0xbe>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	438a      	bics	r2, r1
 8002874:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d104      	bne.n	8002886 <HAL_TIM_PWM_Stop_IT+0xce>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	223a      	movs	r2, #58	@ 0x3a
 8002880:	2101      	movs	r1, #1
 8002882:	5499      	strb	r1, [r3, r2]
 8002884:	e013      	b.n	80028ae <HAL_TIM_PWM_Stop_IT+0xf6>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d104      	bne.n	8002896 <HAL_TIM_PWM_Stop_IT+0xde>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	223b      	movs	r2, #59	@ 0x3b
 8002890:	2101      	movs	r1, #1
 8002892:	5499      	strb	r1, [r3, r2]
 8002894:	e00b      	b.n	80028ae <HAL_TIM_PWM_Stop_IT+0xf6>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d104      	bne.n	80028a6 <HAL_TIM_PWM_Stop_IT+0xee>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	223c      	movs	r2, #60	@ 0x3c
 80028a0:	2101      	movs	r1, #1
 80028a2:	5499      	strb	r1, [r3, r2]
 80028a4:	e003      	b.n	80028ae <HAL_TIM_PWM_Stop_IT+0xf6>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	223d      	movs	r2, #61	@ 0x3d
 80028aa:	2101      	movs	r1, #1
 80028ac:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80028ae:	230f      	movs	r3, #15
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	781b      	ldrb	r3, [r3, #0]
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b004      	add	sp, #16
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	00001111 	.word	0x00001111

080028c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2202      	movs	r2, #2
 80028dc:	4013      	ands	r3, r2
 80028de:	d021      	beq.n	8002924 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2202      	movs	r2, #2
 80028e4:	4013      	ands	r3, r2
 80028e6:	d01d      	beq.n	8002924 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2203      	movs	r2, #3
 80028ee:	4252      	negs	r2, r2
 80028f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2203      	movs	r2, #3
 8002900:	4013      	ands	r3, r2
 8002902:	d004      	beq.n	800290e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	0018      	movs	r0, r3
 8002908:	f000 fa48 	bl	8002d9c <HAL_TIM_IC_CaptureCallback>
 800290c:	e007      	b.n	800291e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0018      	movs	r0, r3
 8002912:	f000 fa3b 	bl	8002d8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	0018      	movs	r0, r3
 800291a:	f7fd fd97 	bl	800044c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2204      	movs	r2, #4
 8002928:	4013      	ands	r3, r2
 800292a:	d022      	beq.n	8002972 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2204      	movs	r2, #4
 8002930:	4013      	ands	r3, r2
 8002932:	d01e      	beq.n	8002972 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2205      	movs	r2, #5
 800293a:	4252      	negs	r2, r2
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699a      	ldr	r2, [r3, #24]
 800294a:	23c0      	movs	r3, #192	@ 0xc0
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4013      	ands	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	0018      	movs	r0, r3
 8002956:	f000 fa21 	bl	8002d9c <HAL_TIM_IC_CaptureCallback>
 800295a:	e007      	b.n	800296c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0018      	movs	r0, r3
 8002960:	f000 fa14 	bl	8002d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	0018      	movs	r0, r3
 8002968:	f7fd fd70 	bl	800044c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	2208      	movs	r2, #8
 8002976:	4013      	ands	r3, r2
 8002978:	d021      	beq.n	80029be <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2208      	movs	r2, #8
 800297e:	4013      	ands	r3, r2
 8002980:	d01d      	beq.n	80029be <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2209      	movs	r2, #9
 8002988:	4252      	negs	r2, r2
 800298a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2204      	movs	r2, #4
 8002990:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	2203      	movs	r2, #3
 800299a:	4013      	ands	r3, r2
 800299c:	d004      	beq.n	80029a8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	0018      	movs	r0, r3
 80029a2:	f000 f9fb 	bl	8002d9c <HAL_TIM_IC_CaptureCallback>
 80029a6:	e007      	b.n	80029b8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0018      	movs	r0, r3
 80029ac:	f000 f9ee 	bl	8002d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f7fd fd4a 	bl	800044c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	2210      	movs	r2, #16
 80029c2:	4013      	ands	r3, r2
 80029c4:	d022      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2210      	movs	r2, #16
 80029ca:	4013      	ands	r3, r2
 80029cc:	d01e      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2211      	movs	r2, #17
 80029d4:	4252      	negs	r2, r2
 80029d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2208      	movs	r2, #8
 80029dc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	69da      	ldr	r2, [r3, #28]
 80029e4:	23c0      	movs	r3, #192	@ 0xc0
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4013      	ands	r3, r2
 80029ea:	d004      	beq.n	80029f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	0018      	movs	r0, r3
 80029f0:	f000 f9d4 	bl	8002d9c <HAL_TIM_IC_CaptureCallback>
 80029f4:	e007      	b.n	8002a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 f9c7 	bl	8002d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7fd fd23 	bl	800044c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4013      	ands	r3, r2
 8002a12:	d00c      	beq.n	8002a2e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d008      	beq.n	8002a2e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2202      	movs	r2, #2
 8002a22:	4252      	negs	r2, r2
 8002a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7fe f905 	bl	8000c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2240      	movs	r2, #64	@ 0x40
 8002a32:	4013      	ands	r3, r2
 8002a34:	d00c      	beq.n	8002a50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2240      	movs	r2, #64	@ 0x40
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d008      	beq.n	8002a50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2241      	movs	r2, #65	@ 0x41
 8002a44:	4252      	negs	r2, r2
 8002a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f000 f9ae 	bl	8002dac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a64:	2317      	movs	r3, #23
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2238      	movs	r2, #56	@ 0x38
 8002a70:	5c9b      	ldrb	r3, [r3, r2]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e0ad      	b.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2238      	movs	r2, #56	@ 0x38
 8002a7e:	2101      	movs	r1, #1
 8002a80:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d100      	bne.n	8002a8a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002a88:	e076      	b.n	8002b78 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b0c      	cmp	r3, #12
 8002a8e:	d900      	bls.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002a90:	e095      	b.n	8002bbe <HAL_TIM_PWM_ConfigChannel+0x166>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d04e      	beq.n	8002b36 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d900      	bls.n	8002aa0 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002a9e:	e08e      	b.n	8002bbe <HAL_TIM_PWM_ConfigChannel+0x166>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_PWM_ConfigChannel+0x56>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d021      	beq.n	8002af0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002aac:	e087      	b.n	8002bbe <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	0011      	movs	r1, r2
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 f9da 	bl	8002e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2108      	movs	r1, #8
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	699a      	ldr	r2, [r3, #24]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2104      	movs	r1, #4
 8002ad8:	438a      	bics	r2, r1
 8002ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	6999      	ldr	r1, [r3, #24]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	619a      	str	r2, [r3, #24]
      break;
 8002aee:	e06b      	b.n	8002bc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	0011      	movs	r1, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f000 f9f5 	bl	8002ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699a      	ldr	r2, [r3, #24]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2180      	movs	r1, #128	@ 0x80
 8002b0a:	0109      	lsls	r1, r1, #4
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699a      	ldr	r2, [r3, #24]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4931      	ldr	r1, [pc, #196]	@ (8002be0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002b1c:	400a      	ands	r2, r1
 8002b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6999      	ldr	r1, [r3, #24]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	021a      	lsls	r2, r3, #8
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	619a      	str	r2, [r3, #24]
      break;
 8002b34:	e048      	b.n	8002bc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	0011      	movs	r1, r2
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 fa14 	bl	8002f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2108      	movs	r1, #8
 8002b50:	430a      	orrs	r2, r1
 8002b52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2104      	movs	r1, #4
 8002b60:	438a      	bics	r2, r1
 8002b62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69d9      	ldr	r1, [r3, #28]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	61da      	str	r2, [r3, #28]
      break;
 8002b76:	e027      	b.n	8002bc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	0011      	movs	r1, r2
 8002b80:	0018      	movs	r0, r3
 8002b82:	f000 fa33 	bl	8002fec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69da      	ldr	r2, [r3, #28]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2180      	movs	r1, #128	@ 0x80
 8002b92:	0109      	lsls	r1, r1, #4
 8002b94:	430a      	orrs	r2, r1
 8002b96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	490f      	ldr	r1, [pc, #60]	@ (8002be0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002ba4:	400a      	ands	r2, r1
 8002ba6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69d9      	ldr	r1, [r3, #28]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	021a      	lsls	r2, r3, #8
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	61da      	str	r2, [r3, #28]
      break;
 8002bbc:	e004      	b.n	8002bc8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002bbe:	2317      	movs	r3, #23
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
      break;
 8002bc6:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2238      	movs	r2, #56	@ 0x38
 8002bcc:	2100      	movs	r1, #0
 8002bce:	5499      	strb	r1, [r3, r2]

  return status;
 8002bd0:	2317      	movs	r3, #23
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	781b      	ldrb	r3, [r3, #0]
}
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b006      	add	sp, #24
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	fffffbff 	.word	0xfffffbff

08002be4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bee:	230f      	movs	r3, #15
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2238      	movs	r2, #56	@ 0x38
 8002bfa:	5c9b      	ldrb	r3, [r3, r2]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_TIM_ConfigClockSource+0x20>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e0bc      	b.n	8002d7e <HAL_TIM_ConfigClockSource+0x19a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2238      	movs	r2, #56	@ 0x38
 8002c08:	2101      	movs	r1, #1
 8002c0a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2239      	movs	r2, #57	@ 0x39
 8002c10:	2102      	movs	r1, #2
 8002c12:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2277      	movs	r2, #119	@ 0x77
 8002c20:	4393      	bics	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4a58      	ldr	r2, [pc, #352]	@ (8002d88 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2280      	movs	r2, #128	@ 0x80
 8002c3a:	0192      	lsls	r2, r2, #6
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d040      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0xde>
 8002c40:	2280      	movs	r2, #128	@ 0x80
 8002c42:	0192      	lsls	r2, r2, #6
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d900      	bls.n	8002c4a <HAL_TIM_ConfigClockSource+0x66>
 8002c48:	e088      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x178>
 8002c4a:	2280      	movs	r2, #128	@ 0x80
 8002c4c:	0152      	lsls	r2, r2, #5
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d100      	bne.n	8002c54 <HAL_TIM_ConfigClockSource+0x70>
 8002c52:	e088      	b.n	8002d66 <HAL_TIM_ConfigClockSource+0x182>
 8002c54:	2280      	movs	r2, #128	@ 0x80
 8002c56:	0152      	lsls	r2, r2, #5
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d900      	bls.n	8002c5e <HAL_TIM_ConfigClockSource+0x7a>
 8002c5c:	e07e      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x178>
 8002c5e:	2b70      	cmp	r3, #112	@ 0x70
 8002c60:	d018      	beq.n	8002c94 <HAL_TIM_ConfigClockSource+0xb0>
 8002c62:	d900      	bls.n	8002c66 <HAL_TIM_ConfigClockSource+0x82>
 8002c64:	e07a      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x178>
 8002c66:	2b60      	cmp	r3, #96	@ 0x60
 8002c68:	d04f      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x126>
 8002c6a:	d900      	bls.n	8002c6e <HAL_TIM_ConfigClockSource+0x8a>
 8002c6c:	e076      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x178>
 8002c6e:	2b50      	cmp	r3, #80	@ 0x50
 8002c70:	d03b      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0x106>
 8002c72:	d900      	bls.n	8002c76 <HAL_TIM_ConfigClockSource+0x92>
 8002c74:	e072      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x178>
 8002c76:	2b40      	cmp	r3, #64	@ 0x40
 8002c78:	d057      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0x146>
 8002c7a:	d900      	bls.n	8002c7e <HAL_TIM_ConfigClockSource+0x9a>
 8002c7c:	e06e      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x178>
 8002c7e:	2b30      	cmp	r3, #48	@ 0x30
 8002c80:	d063      	beq.n	8002d4a <HAL_TIM_ConfigClockSource+0x166>
 8002c82:	d86b      	bhi.n	8002d5c <HAL_TIM_ConfigClockSource+0x178>
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d060      	beq.n	8002d4a <HAL_TIM_ConfigClockSource+0x166>
 8002c88:	d868      	bhi.n	8002d5c <HAL_TIM_ConfigClockSource+0x178>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d05d      	beq.n	8002d4a <HAL_TIM_ConfigClockSource+0x166>
 8002c8e:	2b10      	cmp	r3, #16
 8002c90:	d05b      	beq.n	8002d4a <HAL_TIM_ConfigClockSource+0x166>
 8002c92:	e063      	b.n	8002d5c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ca4:	f000 fa62 	bl	800316c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2277      	movs	r2, #119	@ 0x77
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	609a      	str	r2, [r3, #8]
      break;
 8002cc0:	e052      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cd2:	f000 fa4b 	bl	800316c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2180      	movs	r1, #128	@ 0x80
 8002ce2:	01c9      	lsls	r1, r1, #7
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	609a      	str	r2, [r3, #8]
      break;
 8002ce8:	e03e      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	f000 f9be 	bl	8003078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2150      	movs	r1, #80	@ 0x50
 8002d02:	0018      	movs	r0, r3
 8002d04:	f000 fa18 	bl	8003138 <TIM_ITRx_SetConfig>
      break;
 8002d08:	e02e      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d16:	001a      	movs	r2, r3
 8002d18:	f000 f9dc 	bl	80030d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2160      	movs	r1, #96	@ 0x60
 8002d22:	0018      	movs	r0, r3
 8002d24:	f000 fa08 	bl	8003138 <TIM_ITRx_SetConfig>
      break;
 8002d28:	e01e      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d36:	001a      	movs	r2, r3
 8002d38:	f000 f99e 	bl	8003078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2140      	movs	r1, #64	@ 0x40
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 f9f8 	bl	8003138 <TIM_ITRx_SetConfig>
      break;
 8002d48:	e00e      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	0019      	movs	r1, r3
 8002d54:	0010      	movs	r0, r2
 8002d56:	f000 f9ef 	bl	8003138 <TIM_ITRx_SetConfig>
      break;
 8002d5a:	e005      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002d5c:	230f      	movs	r3, #15
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
      break;
 8002d64:	e000      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002d66:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2239      	movs	r2, #57	@ 0x39
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2238      	movs	r2, #56	@ 0x38
 8002d74:	2100      	movs	r1, #0
 8002d76:	5499      	strb	r1, [r3, r2]

  return status;
 8002d78:	230f      	movs	r3, #15
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	781b      	ldrb	r3, [r3, #0]
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b004      	add	sp, #16
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	ffff00ff 	.word	0xffff00ff

08002d8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b002      	add	sp, #8
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002da4:	46c0      	nop			@ (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002db4:	46c0      	nop			@ (mov r8, r8)
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	2380      	movs	r3, #128	@ 0x80
 8002dd0:	05db      	lsls	r3, r3, #23
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d007      	beq.n	8002de6 <TIM_Base_SetConfig+0x2a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a22      	ldr	r2, [pc, #136]	@ (8002e64 <TIM_Base_SetConfig+0xa8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <TIM_Base_SetConfig+0x2a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a21      	ldr	r2, [pc, #132]	@ (8002e68 <TIM_Base_SetConfig+0xac>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d108      	bne.n	8002df8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2270      	movs	r2, #112	@ 0x70
 8002dea:	4393      	bics	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	2380      	movs	r3, #128	@ 0x80
 8002dfc:	05db      	lsls	r3, r3, #23
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d007      	beq.n	8002e12 <TIM_Base_SetConfig+0x56>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a17      	ldr	r2, [pc, #92]	@ (8002e64 <TIM_Base_SetConfig+0xa8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d003      	beq.n	8002e12 <TIM_Base_SetConfig+0x56>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a16      	ldr	r2, [pc, #88]	@ (8002e68 <TIM_Base_SetConfig+0xac>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d108      	bne.n	8002e24 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a15      	ldr	r2, [pc, #84]	@ (8002e6c <TIM_Base_SetConfig+0xb0>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2280      	movs	r2, #128	@ 0x80
 8002e28:	4393      	bics	r3, r2
 8002e2a:	001a      	movs	r2, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2204      	movs	r2, #4
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	601a      	str	r2, [r3, #0]
}
 8002e5c:	46c0      	nop			@ (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b004      	add	sp, #16
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40010800 	.word	0x40010800
 8002e68:	40011400 	.word	0x40011400
 8002e6c:	fffffcff 	.word	0xfffffcff

08002e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	2201      	movs	r2, #1
 8002e86:	4393      	bics	r3, r2
 8002e88:	001a      	movs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2270      	movs	r2, #112	@ 0x70
 8002e9e:	4393      	bics	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	4393      	bics	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	4393      	bics	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	621a      	str	r2, [r3, #32]
}
 8002ee0:	46c0      	nop			@ (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b006      	add	sp, #24
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	2210      	movs	r2, #16
 8002efe:	4393      	bics	r3, r2
 8002f00:	001a      	movs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4a13      	ldr	r2, [pc, #76]	@ (8002f64 <TIM_OC2_SetConfig+0x7c>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4a12      	ldr	r2, [pc, #72]	@ (8002f68 <TIM_OC2_SetConfig+0x80>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2220      	movs	r2, #32
 8002f32:	4393      	bics	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	621a      	str	r2, [r3, #32]
}
 8002f5c:	46c0      	nop			@ (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b006      	add	sp, #24
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	ffff8fff 	.word	0xffff8fff
 8002f68:	fffffcff 	.word	0xfffffcff

08002f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4a18      	ldr	r2, [pc, #96]	@ (8002fe4 <TIM_OC3_SetConfig+0x78>)
 8002f82:	401a      	ands	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2270      	movs	r2, #112	@ 0x70
 8002f98:	4393      	bics	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	4393      	bics	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe8 <TIM_OC3_SetConfig+0x7c>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	021b      	lsls	r3, r3, #8
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	621a      	str	r2, [r3, #32]
}
 8002fdc:	46c0      	nop			@ (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b006      	add	sp, #24
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	fffffeff 	.word	0xfffffeff
 8002fe8:	fffffdff 	.word	0xfffffdff

08002fec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	4a19      	ldr	r2, [pc, #100]	@ (8003068 <TIM_OC4_SetConfig+0x7c>)
 8003002:	401a      	ands	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4a15      	ldr	r2, [pc, #84]	@ (800306c <TIM_OC4_SetConfig+0x80>)
 8003018:	4013      	ands	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4a14      	ldr	r2, [pc, #80]	@ (8003070 <TIM_OC4_SetConfig+0x84>)
 8003020:	4013      	ands	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	021b      	lsls	r3, r3, #8
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	4a10      	ldr	r2, [pc, #64]	@ (8003074 <TIM_OC4_SetConfig+0x88>)
 8003034:	4013      	ands	r3, r2
 8003036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	031b      	lsls	r3, r3, #12
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	4313      	orrs	r3, r2
 8003042:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	621a      	str	r2, [r3, #32]
}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b006      	add	sp, #24
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			@ (mov r8, r8)
 8003068:	ffffefff 	.word	0xffffefff
 800306c:	ffff8fff 	.word	0xffff8fff
 8003070:	fffffcff 	.word	0xfffffcff
 8003074:	ffffdfff 	.word	0xffffdfff

08003078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	2201      	movs	r2, #1
 8003090:	4393      	bics	r3, r2
 8003092:	001a      	movs	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	22f0      	movs	r2, #240	@ 0xf0
 80030a2:	4393      	bics	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	220a      	movs	r2, #10
 80030b4:	4393      	bics	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	621a      	str	r2, [r3, #32]
}
 80030cc:	46c0      	nop			@ (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b006      	add	sp, #24
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	2210      	movs	r2, #16
 80030ec:	4393      	bics	r3, r2
 80030ee:	001a      	movs	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003134 <TIM_TI2_ConfigInputStage+0x60>)
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	031b      	lsls	r3, r3, #12
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	22a0      	movs	r2, #160	@ 0xa0
 8003110:	4393      	bics	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b006      	add	sp, #24
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	ffff0fff 	.word	0xffff0fff

08003138 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2270      	movs	r2, #112	@ 0x70
 800314c:	4393      	bics	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	2207      	movs	r2, #7
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	609a      	str	r2, [r3, #8]
}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b004      	add	sp, #16
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	4a09      	ldr	r2, [pc, #36]	@ (80031a8 <TIM_ETR_SetConfig+0x3c>)
 8003184:	4013      	ands	r3, r2
 8003186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	021a      	lsls	r2, r3, #8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	431a      	orrs	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4313      	orrs	r3, r2
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	609a      	str	r2, [r3, #8]
}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b006      	add	sp, #24
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	ffff00ff 	.word	0xffff00ff

080031ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	221f      	movs	r2, #31
 80031bc:	4013      	ands	r3, r2
 80031be:	2201      	movs	r2, #1
 80031c0:	409a      	lsls	r2, r3
 80031c2:	0013      	movs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	43d2      	mvns	r2, r2
 80031ce:	401a      	ands	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a1a      	ldr	r2, [r3, #32]
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	211f      	movs	r1, #31
 80031dc:	400b      	ands	r3, r1
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4099      	lsls	r1, r3
 80031e2:	000b      	movs	r3, r1
 80031e4:	431a      	orrs	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	621a      	str	r2, [r3, #32]
}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b006      	add	sp, #24
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2238      	movs	r2, #56	@ 0x38
 8003202:	5c9b      	ldrb	r3, [r3, r2]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003208:	2302      	movs	r3, #2
 800320a:	e042      	b.n	8003292 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2238      	movs	r2, #56	@ 0x38
 8003210:	2101      	movs	r1, #1
 8003212:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2239      	movs	r2, #57	@ 0x39
 8003218:	2102      	movs	r1, #2
 800321a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2270      	movs	r2, #112	@ 0x70
 8003230:	4393      	bics	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	2380      	movs	r3, #128	@ 0x80
 800324c:	05db      	lsls	r3, r3, #23
 800324e:	429a      	cmp	r2, r3
 8003250:	d009      	beq.n	8003266 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a11      	ldr	r2, [pc, #68]	@ (800329c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d004      	beq.n	8003266 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0f      	ldr	r2, [pc, #60]	@ (80032a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d10c      	bne.n	8003280 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2280      	movs	r2, #128	@ 0x80
 800326a:	4393      	bics	r3, r2
 800326c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	4313      	orrs	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2239      	movs	r2, #57	@ 0x39
 8003284:	2101      	movs	r1, #1
 8003286:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2238      	movs	r2, #56	@ 0x38
 800328c:	2100      	movs	r1, #0
 800328e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b004      	add	sp, #16
 8003298:	bd80      	pop	{r7, pc}
 800329a:	46c0      	nop			@ (mov r8, r8)
 800329c:	40010800 	.word	0x40010800
 80032a0:	40011400 	.word	0x40011400

080032a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e044      	b.n	8003340 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d107      	bne.n	80032ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2278      	movs	r2, #120	@ 0x78
 80032c2:	2100      	movs	r1, #0
 80032c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7fd fd5f 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2224      	movs	r2, #36	@ 0x24
 80032d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2101      	movs	r1, #1
 80032e0:	438a      	bics	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	0018      	movs	r0, r3
 80032f0:	f000 fab0 	bl	8003854 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 f828 	bl	800334c <UART_SetConfig>
 80032fc:	0003      	movs	r3, r0
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e01c      	b.n	8003340 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685a      	ldr	r2, [r3, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	490d      	ldr	r1, [pc, #52]	@ (8003348 <HAL_UART_Init+0xa4>)
 8003312:	400a      	ands	r2, r1
 8003314:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	212a      	movs	r1, #42	@ 0x2a
 8003322:	438a      	bics	r2, r1
 8003324:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2101      	movs	r1, #1
 8003332:	430a      	orrs	r2, r1
 8003334:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	0018      	movs	r0, r3
 800333a:	f000 fb3f 	bl	80039bc <UART_CheckIdleState>
 800333e:	0003      	movs	r3, r0
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	b002      	add	sp, #8
 8003346:	bd80      	pop	{r7, pc}
 8003348:	ffffb7ff 	.word	0xffffb7ff

0800334c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800334c:	b5b0      	push	{r4, r5, r7, lr}
 800334e:	b08e      	sub	sp, #56	@ 0x38
 8003350:	af00      	add	r7, sp, #0
 8003352:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003354:	231a      	movs	r3, #26
 8003356:	2218      	movs	r2, #24
 8003358:	189b      	adds	r3, r3, r2
 800335a:	19db      	adds	r3, r3, r7
 800335c:	2200      	movs	r2, #0
 800335e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	431a      	orrs	r2, r3
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	431a      	orrs	r2, r3
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	4313      	orrs	r3, r2
 8003376:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4ac6      	ldr	r2, [pc, #792]	@ (8003698 <UART_SetConfig+0x34c>)
 8003380:	4013      	ands	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4ac1      	ldr	r2, [pc, #772]	@ (800369c <UART_SetConfig+0x350>)
 8003396:	4013      	ands	r3, r2
 8003398:	0019      	movs	r1, r3
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4abb      	ldr	r2, [pc, #748]	@ (80036a0 <UART_SetConfig+0x354>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033bc:	4313      	orrs	r3, r2
 80033be:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	4ab7      	ldr	r2, [pc, #732]	@ (80036a4 <UART_SetConfig+0x358>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	0019      	movs	r1, r3
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80033d2:	430a      	orrs	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4ab3      	ldr	r2, [pc, #716]	@ (80036a8 <UART_SetConfig+0x35c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d131      	bne.n	8003444 <UART_SetConfig+0xf8>
 80033e0:	4bb2      	ldr	r3, [pc, #712]	@ (80036ac <UART_SetConfig+0x360>)
 80033e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e4:	2203      	movs	r2, #3
 80033e6:	4013      	ands	r3, r2
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d01d      	beq.n	8003428 <UART_SetConfig+0xdc>
 80033ec:	d823      	bhi.n	8003436 <UART_SetConfig+0xea>
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d00c      	beq.n	800340c <UART_SetConfig+0xc0>
 80033f2:	d820      	bhi.n	8003436 <UART_SetConfig+0xea>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <UART_SetConfig+0xb2>
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d00e      	beq.n	800341a <UART_SetConfig+0xce>
 80033fc:	e01b      	b.n	8003436 <UART_SetConfig+0xea>
 80033fe:	231b      	movs	r3, #27
 8003400:	2218      	movs	r2, #24
 8003402:	189b      	adds	r3, r3, r2
 8003404:	19db      	adds	r3, r3, r7
 8003406:	2201      	movs	r2, #1
 8003408:	701a      	strb	r2, [r3, #0]
 800340a:	e09c      	b.n	8003546 <UART_SetConfig+0x1fa>
 800340c:	231b      	movs	r3, #27
 800340e:	2218      	movs	r2, #24
 8003410:	189b      	adds	r3, r3, r2
 8003412:	19db      	adds	r3, r3, r7
 8003414:	2202      	movs	r2, #2
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	e095      	b.n	8003546 <UART_SetConfig+0x1fa>
 800341a:	231b      	movs	r3, #27
 800341c:	2218      	movs	r2, #24
 800341e:	189b      	adds	r3, r3, r2
 8003420:	19db      	adds	r3, r3, r7
 8003422:	2204      	movs	r2, #4
 8003424:	701a      	strb	r2, [r3, #0]
 8003426:	e08e      	b.n	8003546 <UART_SetConfig+0x1fa>
 8003428:	231b      	movs	r3, #27
 800342a:	2218      	movs	r2, #24
 800342c:	189b      	adds	r3, r3, r2
 800342e:	19db      	adds	r3, r3, r7
 8003430:	2208      	movs	r2, #8
 8003432:	701a      	strb	r2, [r3, #0]
 8003434:	e087      	b.n	8003546 <UART_SetConfig+0x1fa>
 8003436:	231b      	movs	r3, #27
 8003438:	2218      	movs	r2, #24
 800343a:	189b      	adds	r3, r3, r2
 800343c:	19db      	adds	r3, r3, r7
 800343e:	2210      	movs	r2, #16
 8003440:	701a      	strb	r2, [r3, #0]
 8003442:	e080      	b.n	8003546 <UART_SetConfig+0x1fa>
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a99      	ldr	r2, [pc, #612]	@ (80036b0 <UART_SetConfig+0x364>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d131      	bne.n	80034b2 <UART_SetConfig+0x166>
 800344e:	4b97      	ldr	r3, [pc, #604]	@ (80036ac <UART_SetConfig+0x360>)
 8003450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003452:	220c      	movs	r2, #12
 8003454:	4013      	ands	r3, r2
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d01d      	beq.n	8003496 <UART_SetConfig+0x14a>
 800345a:	d823      	bhi.n	80034a4 <UART_SetConfig+0x158>
 800345c:	2b08      	cmp	r3, #8
 800345e:	d00c      	beq.n	800347a <UART_SetConfig+0x12e>
 8003460:	d820      	bhi.n	80034a4 <UART_SetConfig+0x158>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d002      	beq.n	800346c <UART_SetConfig+0x120>
 8003466:	2b04      	cmp	r3, #4
 8003468:	d00e      	beq.n	8003488 <UART_SetConfig+0x13c>
 800346a:	e01b      	b.n	80034a4 <UART_SetConfig+0x158>
 800346c:	231b      	movs	r3, #27
 800346e:	2218      	movs	r2, #24
 8003470:	189b      	adds	r3, r3, r2
 8003472:	19db      	adds	r3, r3, r7
 8003474:	2200      	movs	r2, #0
 8003476:	701a      	strb	r2, [r3, #0]
 8003478:	e065      	b.n	8003546 <UART_SetConfig+0x1fa>
 800347a:	231b      	movs	r3, #27
 800347c:	2218      	movs	r2, #24
 800347e:	189b      	adds	r3, r3, r2
 8003480:	19db      	adds	r3, r3, r7
 8003482:	2202      	movs	r2, #2
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e05e      	b.n	8003546 <UART_SetConfig+0x1fa>
 8003488:	231b      	movs	r3, #27
 800348a:	2218      	movs	r2, #24
 800348c:	189b      	adds	r3, r3, r2
 800348e:	19db      	adds	r3, r3, r7
 8003490:	2204      	movs	r2, #4
 8003492:	701a      	strb	r2, [r3, #0]
 8003494:	e057      	b.n	8003546 <UART_SetConfig+0x1fa>
 8003496:	231b      	movs	r3, #27
 8003498:	2218      	movs	r2, #24
 800349a:	189b      	adds	r3, r3, r2
 800349c:	19db      	adds	r3, r3, r7
 800349e:	2208      	movs	r2, #8
 80034a0:	701a      	strb	r2, [r3, #0]
 80034a2:	e050      	b.n	8003546 <UART_SetConfig+0x1fa>
 80034a4:	231b      	movs	r3, #27
 80034a6:	2218      	movs	r2, #24
 80034a8:	189b      	adds	r3, r3, r2
 80034aa:	19db      	adds	r3, r3, r7
 80034ac:	2210      	movs	r2, #16
 80034ae:	701a      	strb	r2, [r3, #0]
 80034b0:	e049      	b.n	8003546 <UART_SetConfig+0x1fa>
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a7a      	ldr	r2, [pc, #488]	@ (80036a0 <UART_SetConfig+0x354>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d13e      	bne.n	800353a <UART_SetConfig+0x1ee>
 80034bc:	4b7b      	ldr	r3, [pc, #492]	@ (80036ac <UART_SetConfig+0x360>)
 80034be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034c0:	23c0      	movs	r3, #192	@ 0xc0
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	4013      	ands	r3, r2
 80034c6:	22c0      	movs	r2, #192	@ 0xc0
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d027      	beq.n	800351e <UART_SetConfig+0x1d2>
 80034ce:	22c0      	movs	r2, #192	@ 0xc0
 80034d0:	0112      	lsls	r2, r2, #4
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d82a      	bhi.n	800352c <UART_SetConfig+0x1e0>
 80034d6:	2280      	movs	r2, #128	@ 0x80
 80034d8:	0112      	lsls	r2, r2, #4
 80034da:	4293      	cmp	r3, r2
 80034dc:	d011      	beq.n	8003502 <UART_SetConfig+0x1b6>
 80034de:	2280      	movs	r2, #128	@ 0x80
 80034e0:	0112      	lsls	r2, r2, #4
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d822      	bhi.n	800352c <UART_SetConfig+0x1e0>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <UART_SetConfig+0x1a8>
 80034ea:	2280      	movs	r2, #128	@ 0x80
 80034ec:	00d2      	lsls	r2, r2, #3
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00e      	beq.n	8003510 <UART_SetConfig+0x1c4>
 80034f2:	e01b      	b.n	800352c <UART_SetConfig+0x1e0>
 80034f4:	231b      	movs	r3, #27
 80034f6:	2218      	movs	r2, #24
 80034f8:	189b      	adds	r3, r3, r2
 80034fa:	19db      	adds	r3, r3, r7
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
 8003500:	e021      	b.n	8003546 <UART_SetConfig+0x1fa>
 8003502:	231b      	movs	r3, #27
 8003504:	2218      	movs	r2, #24
 8003506:	189b      	adds	r3, r3, r2
 8003508:	19db      	adds	r3, r3, r7
 800350a:	2202      	movs	r2, #2
 800350c:	701a      	strb	r2, [r3, #0]
 800350e:	e01a      	b.n	8003546 <UART_SetConfig+0x1fa>
 8003510:	231b      	movs	r3, #27
 8003512:	2218      	movs	r2, #24
 8003514:	189b      	adds	r3, r3, r2
 8003516:	19db      	adds	r3, r3, r7
 8003518:	2204      	movs	r2, #4
 800351a:	701a      	strb	r2, [r3, #0]
 800351c:	e013      	b.n	8003546 <UART_SetConfig+0x1fa>
 800351e:	231b      	movs	r3, #27
 8003520:	2218      	movs	r2, #24
 8003522:	189b      	adds	r3, r3, r2
 8003524:	19db      	adds	r3, r3, r7
 8003526:	2208      	movs	r2, #8
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	e00c      	b.n	8003546 <UART_SetConfig+0x1fa>
 800352c:	231b      	movs	r3, #27
 800352e:	2218      	movs	r2, #24
 8003530:	189b      	adds	r3, r3, r2
 8003532:	19db      	adds	r3, r3, r7
 8003534:	2210      	movs	r2, #16
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	e005      	b.n	8003546 <UART_SetConfig+0x1fa>
 800353a:	231b      	movs	r3, #27
 800353c:	2218      	movs	r2, #24
 800353e:	189b      	adds	r3, r3, r2
 8003540:	19db      	adds	r3, r3, r7
 8003542:	2210      	movs	r2, #16
 8003544:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a55      	ldr	r2, [pc, #340]	@ (80036a0 <UART_SetConfig+0x354>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d000      	beq.n	8003552 <UART_SetConfig+0x206>
 8003550:	e084      	b.n	800365c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003552:	231b      	movs	r3, #27
 8003554:	2218      	movs	r2, #24
 8003556:	189b      	adds	r3, r3, r2
 8003558:	19db      	adds	r3, r3, r7
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b08      	cmp	r3, #8
 800355e:	d01d      	beq.n	800359c <UART_SetConfig+0x250>
 8003560:	dc20      	bgt.n	80035a4 <UART_SetConfig+0x258>
 8003562:	2b04      	cmp	r3, #4
 8003564:	d015      	beq.n	8003592 <UART_SetConfig+0x246>
 8003566:	dc1d      	bgt.n	80035a4 <UART_SetConfig+0x258>
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <UART_SetConfig+0x226>
 800356c:	2b02      	cmp	r3, #2
 800356e:	d005      	beq.n	800357c <UART_SetConfig+0x230>
 8003570:	e018      	b.n	80035a4 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003572:	f7fe fd8f 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 8003576:	0003      	movs	r3, r0
 8003578:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800357a:	e01c      	b.n	80035b6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800357c:	4b4b      	ldr	r3, [pc, #300]	@ (80036ac <UART_SetConfig+0x360>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2210      	movs	r2, #16
 8003582:	4013      	ands	r3, r2
 8003584:	d002      	beq.n	800358c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003586:	4b4b      	ldr	r3, [pc, #300]	@ (80036b4 <UART_SetConfig+0x368>)
 8003588:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800358a:	e014      	b.n	80035b6 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800358c:	4b4a      	ldr	r3, [pc, #296]	@ (80036b8 <UART_SetConfig+0x36c>)
 800358e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003590:	e011      	b.n	80035b6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003592:	f7fe fcef 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8003596:	0003      	movs	r3, r0
 8003598:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800359a:	e00c      	b.n	80035b6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800359c:	2380      	movs	r3, #128	@ 0x80
 800359e:	021b      	lsls	r3, r3, #8
 80035a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80035a2:	e008      	b.n	80035b6 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80035a8:	231a      	movs	r3, #26
 80035aa:	2218      	movs	r2, #24
 80035ac:	189b      	adds	r3, r3, r2
 80035ae:	19db      	adds	r3, r3, r7
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]
        break;
 80035b4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d100      	bne.n	80035be <UART_SetConfig+0x272>
 80035bc:	e132      	b.n	8003824 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	0013      	movs	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	189b      	adds	r3, r3, r2
 80035c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d305      	bcc.n	80035da <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d906      	bls.n	80035e8 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80035da:	231a      	movs	r3, #26
 80035dc:	2218      	movs	r2, #24
 80035de:	189b      	adds	r3, r3, r2
 80035e0:	19db      	adds	r3, r3, r7
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
 80035e6:	e11d      	b.n	8003824 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80035e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]
 80035f0:	6939      	ldr	r1, [r7, #16]
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	000b      	movs	r3, r1
 80035f6:	0e1b      	lsrs	r3, r3, #24
 80035f8:	0010      	movs	r0, r2
 80035fa:	0205      	lsls	r5, r0, #8
 80035fc:	431d      	orrs	r5, r3
 80035fe:	000b      	movs	r3, r1
 8003600:	021c      	lsls	r4, r3, #8
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	2300      	movs	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	68b8      	ldr	r0, [r7, #8]
 8003610:	68f9      	ldr	r1, [r7, #12]
 8003612:	1900      	adds	r0, r0, r4
 8003614:	4169      	adcs	r1, r5
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	2300      	movs	r3, #0
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f7fc fdfc 	bl	8000220 <__aeabi_uldivmod>
 8003628:	0002      	movs	r2, r0
 800362a:	000b      	movs	r3, r1
 800362c:	0013      	movs	r3, r2
 800362e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003630:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003632:	23c0      	movs	r3, #192	@ 0xc0
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	429a      	cmp	r2, r3
 8003638:	d309      	bcc.n	800364e <UART_SetConfig+0x302>
 800363a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800363c:	2380      	movs	r3, #128	@ 0x80
 800363e:	035b      	lsls	r3, r3, #13
 8003640:	429a      	cmp	r2, r3
 8003642:	d204      	bcs.n	800364e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800364a:	60da      	str	r2, [r3, #12]
 800364c:	e0ea      	b.n	8003824 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 800364e:	231a      	movs	r3, #26
 8003650:	2218      	movs	r2, #24
 8003652:	189b      	adds	r3, r3, r2
 8003654:	19db      	adds	r3, r3, r7
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
 800365a:	e0e3      	b.n	8003824 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	69da      	ldr	r2, [r3, #28]
 8003660:	2380      	movs	r3, #128	@ 0x80
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	429a      	cmp	r2, r3
 8003666:	d000      	beq.n	800366a <UART_SetConfig+0x31e>
 8003668:	e085      	b.n	8003776 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 800366a:	231b      	movs	r3, #27
 800366c:	2218      	movs	r2, #24
 800366e:	189b      	adds	r3, r3, r2
 8003670:	19db      	adds	r3, r3, r7
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d837      	bhi.n	80036e8 <UART_SetConfig+0x39c>
 8003678:	009a      	lsls	r2, r3, #2
 800367a:	4b10      	ldr	r3, [pc, #64]	@ (80036bc <UART_SetConfig+0x370>)
 800367c:	18d3      	adds	r3, r2, r3
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003682:	f7fe fd07 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 8003686:	0003      	movs	r3, r0
 8003688:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800368a:	e036      	b.n	80036fa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800368c:	f7fe fd18 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 8003690:	0003      	movs	r3, r0
 8003692:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003694:	e031      	b.n	80036fa <UART_SetConfig+0x3ae>
 8003696:	46c0      	nop			@ (mov r8, r8)
 8003698:	efff69f3 	.word	0xefff69f3
 800369c:	ffffcfff 	.word	0xffffcfff
 80036a0:	40004800 	.word	0x40004800
 80036a4:	fffff4ff 	.word	0xfffff4ff
 80036a8:	40013800 	.word	0x40013800
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40004400 	.word	0x40004400
 80036b4:	003d0900 	.word	0x003d0900
 80036b8:	00f42400 	.word	0x00f42400
 80036bc:	08003d48 	.word	0x08003d48
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036c0:	4b60      	ldr	r3, [pc, #384]	@ (8003844 <UART_SetConfig+0x4f8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2210      	movs	r2, #16
 80036c6:	4013      	ands	r3, r2
 80036c8:	d002      	beq.n	80036d0 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80036ca:	4b5f      	ldr	r3, [pc, #380]	@ (8003848 <UART_SetConfig+0x4fc>)
 80036cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80036ce:	e014      	b.n	80036fa <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80036d0:	4b5e      	ldr	r3, [pc, #376]	@ (800384c <UART_SetConfig+0x500>)
 80036d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036d4:	e011      	b.n	80036fa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d6:	f7fe fc4d 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 80036da:	0003      	movs	r3, r0
 80036dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036de:	e00c      	b.n	80036fa <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e0:	2380      	movs	r3, #128	@ 0x80
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80036e6:	e008      	b.n	80036fa <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80036ec:	231a      	movs	r3, #26
 80036ee:	2218      	movs	r2, #24
 80036f0:	189b      	adds	r3, r3, r2
 80036f2:	19db      	adds	r3, r3, r7
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
        break;
 80036f8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d100      	bne.n	8003702 <UART_SetConfig+0x3b6>
 8003700:	e090      	b.n	8003824 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003704:	005a      	lsls	r2, r3, #1
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	085b      	lsrs	r3, r3, #1
 800370c:	18d2      	adds	r2, r2, r3
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	0019      	movs	r1, r3
 8003714:	0010      	movs	r0, r2
 8003716:	f7fc fcf7 	bl	8000108 <__udivsi3>
 800371a:	0003      	movs	r3, r0
 800371c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800371e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003720:	2b0f      	cmp	r3, #15
 8003722:	d921      	bls.n	8003768 <UART_SetConfig+0x41c>
 8003724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003726:	2380      	movs	r3, #128	@ 0x80
 8003728:	025b      	lsls	r3, r3, #9
 800372a:	429a      	cmp	r2, r3
 800372c:	d21c      	bcs.n	8003768 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800372e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003730:	b29a      	uxth	r2, r3
 8003732:	200e      	movs	r0, #14
 8003734:	2418      	movs	r4, #24
 8003736:	1903      	adds	r3, r0, r4
 8003738:	19db      	adds	r3, r3, r7
 800373a:	210f      	movs	r1, #15
 800373c:	438a      	bics	r2, r1
 800373e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003742:	085b      	lsrs	r3, r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	2207      	movs	r2, #7
 8003748:	4013      	ands	r3, r2
 800374a:	b299      	uxth	r1, r3
 800374c:	1903      	adds	r3, r0, r4
 800374e:	19db      	adds	r3, r3, r7
 8003750:	1902      	adds	r2, r0, r4
 8003752:	19d2      	adds	r2, r2, r7
 8003754:	8812      	ldrh	r2, [r2, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	1902      	adds	r2, r0, r4
 8003760:	19d2      	adds	r2, r2, r7
 8003762:	8812      	ldrh	r2, [r2, #0]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	e05d      	b.n	8003824 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003768:	231a      	movs	r3, #26
 800376a:	2218      	movs	r2, #24
 800376c:	189b      	adds	r3, r3, r2
 800376e:	19db      	adds	r3, r3, r7
 8003770:	2201      	movs	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
 8003774:	e056      	b.n	8003824 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003776:	231b      	movs	r3, #27
 8003778:	2218      	movs	r2, #24
 800377a:	189b      	adds	r3, r3, r2
 800377c:	19db      	adds	r3, r3, r7
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b08      	cmp	r3, #8
 8003782:	d822      	bhi.n	80037ca <UART_SetConfig+0x47e>
 8003784:	009a      	lsls	r2, r3, #2
 8003786:	4b32      	ldr	r3, [pc, #200]	@ (8003850 <UART_SetConfig+0x504>)
 8003788:	18d3      	adds	r3, r2, r3
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800378e:	f7fe fc81 	bl	8002094 <HAL_RCC_GetPCLK1Freq>
 8003792:	0003      	movs	r3, r0
 8003794:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003796:	e021      	b.n	80037dc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003798:	f7fe fc92 	bl	80020c0 <HAL_RCC_GetPCLK2Freq>
 800379c:	0003      	movs	r3, r0
 800379e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037a0:	e01c      	b.n	80037dc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037a2:	4b28      	ldr	r3, [pc, #160]	@ (8003844 <UART_SetConfig+0x4f8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2210      	movs	r2, #16
 80037a8:	4013      	ands	r3, r2
 80037aa:	d002      	beq.n	80037b2 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80037ac:	4b26      	ldr	r3, [pc, #152]	@ (8003848 <UART_SetConfig+0x4fc>)
 80037ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80037b0:	e014      	b.n	80037dc <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 80037b2:	4b26      	ldr	r3, [pc, #152]	@ (800384c <UART_SetConfig+0x500>)
 80037b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037b6:	e011      	b.n	80037dc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b8:	f7fe fbdc 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 80037bc:	0003      	movs	r3, r0
 80037be:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037c0:	e00c      	b.n	80037dc <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c2:	2380      	movs	r3, #128	@ 0x80
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80037c8:	e008      	b.n	80037dc <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80037ce:	231a      	movs	r3, #26
 80037d0:	2218      	movs	r2, #24
 80037d2:	189b      	adds	r3, r3, r2
 80037d4:	19db      	adds	r3, r3, r7
 80037d6:	2201      	movs	r2, #1
 80037d8:	701a      	strb	r2, [r3, #0]
        break;
 80037da:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80037dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d020      	beq.n	8003824 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	085a      	lsrs	r2, r3, #1
 80037e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ea:	18d2      	adds	r2, r2, r3
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	0019      	movs	r1, r3
 80037f2:	0010      	movs	r0, r2
 80037f4:	f7fc fc88 	bl	8000108 <__udivsi3>
 80037f8:	0003      	movs	r3, r0
 80037fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fe:	2b0f      	cmp	r3, #15
 8003800:	d90a      	bls.n	8003818 <UART_SetConfig+0x4cc>
 8003802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003804:	2380      	movs	r3, #128	@ 0x80
 8003806:	025b      	lsls	r3, r3, #9
 8003808:	429a      	cmp	r2, r3
 800380a:	d205      	bcs.n	8003818 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800380c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380e:	b29a      	uxth	r2, r3
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	e005      	b.n	8003824 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003818:	231a      	movs	r3, #26
 800381a:	2218      	movs	r2, #24
 800381c:	189b      	adds	r3, r3, r2
 800381e:	19db      	adds	r3, r3, r7
 8003820:	2201      	movs	r2, #1
 8003822:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2200      	movs	r2, #0
 8003828:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2200      	movs	r2, #0
 800382e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003830:	231a      	movs	r3, #26
 8003832:	2218      	movs	r2, #24
 8003834:	189b      	adds	r3, r3, r2
 8003836:	19db      	adds	r3, r3, r7
 8003838:	781b      	ldrb	r3, [r3, #0]
}
 800383a:	0018      	movs	r0, r3
 800383c:	46bd      	mov	sp, r7
 800383e:	b00e      	add	sp, #56	@ 0x38
 8003840:	bdb0      	pop	{r4, r5, r7, pc}
 8003842:	46c0      	nop			@ (mov r8, r8)
 8003844:	40021000 	.word	0x40021000
 8003848:	003d0900 	.word	0x003d0900
 800384c:	00f42400 	.word	0x00f42400
 8003850:	08003d6c 	.word	0x08003d6c

08003854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	2208      	movs	r2, #8
 8003862:	4013      	ands	r3, r2
 8003864:	d00b      	beq.n	800387e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4a4a      	ldr	r2, [pc, #296]	@ (8003998 <UART_AdvFeatureConfig+0x144>)
 800386e:	4013      	ands	r3, r2
 8003870:	0019      	movs	r1, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003882:	2201      	movs	r2, #1
 8003884:	4013      	ands	r3, r2
 8003886:	d00b      	beq.n	80038a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4a43      	ldr	r2, [pc, #268]	@ (800399c <UART_AdvFeatureConfig+0x148>)
 8003890:	4013      	ands	r3, r2
 8003892:	0019      	movs	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	2202      	movs	r2, #2
 80038a6:	4013      	ands	r3, r2
 80038a8:	d00b      	beq.n	80038c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a3b      	ldr	r2, [pc, #236]	@ (80039a0 <UART_AdvFeatureConfig+0x14c>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	0019      	movs	r1, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c6:	2204      	movs	r2, #4
 80038c8:	4013      	ands	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4a34      	ldr	r2, [pc, #208]	@ (80039a4 <UART_AdvFeatureConfig+0x150>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	0019      	movs	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	2210      	movs	r2, #16
 80038ea:	4013      	ands	r3, r2
 80038ec:	d00b      	beq.n	8003906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a2c      	ldr	r2, [pc, #176]	@ (80039a8 <UART_AdvFeatureConfig+0x154>)
 80038f6:	4013      	ands	r3, r2
 80038f8:	0019      	movs	r1, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	2220      	movs	r2, #32
 800390c:	4013      	ands	r3, r2
 800390e:	d00b      	beq.n	8003928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	4a25      	ldr	r2, [pc, #148]	@ (80039ac <UART_AdvFeatureConfig+0x158>)
 8003918:	4013      	ands	r3, r2
 800391a:	0019      	movs	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800392c:	2240      	movs	r2, #64	@ 0x40
 800392e:	4013      	ands	r3, r2
 8003930:	d01d      	beq.n	800396e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a1d      	ldr	r2, [pc, #116]	@ (80039b0 <UART_AdvFeatureConfig+0x15c>)
 800393a:	4013      	ands	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800394e:	2380      	movs	r3, #128	@ 0x80
 8003950:	035b      	lsls	r3, r3, #13
 8003952:	429a      	cmp	r2, r3
 8003954:	d10b      	bne.n	800396e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4a15      	ldr	r2, [pc, #84]	@ (80039b4 <UART_AdvFeatureConfig+0x160>)
 800395e:	4013      	ands	r3, r2
 8003960:	0019      	movs	r1, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	2280      	movs	r2, #128	@ 0x80
 8003974:	4013      	ands	r3, r2
 8003976:	d00b      	beq.n	8003990 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	4a0e      	ldr	r2, [pc, #56]	@ (80039b8 <UART_AdvFeatureConfig+0x164>)
 8003980:	4013      	ands	r3, r2
 8003982:	0019      	movs	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	605a      	str	r2, [r3, #4]
  }
}
 8003990:	46c0      	nop			@ (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}
 8003998:	ffff7fff 	.word	0xffff7fff
 800399c:	fffdffff 	.word	0xfffdffff
 80039a0:	fffeffff 	.word	0xfffeffff
 80039a4:	fffbffff 	.word	0xfffbffff
 80039a8:	ffffefff 	.word	0xffffefff
 80039ac:	ffffdfff 	.word	0xffffdfff
 80039b0:	ffefffff 	.word	0xffefffff
 80039b4:	ff9fffff 	.word	0xff9fffff
 80039b8:	fff7ffff 	.word	0xfff7ffff

080039bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b092      	sub	sp, #72	@ 0x48
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2284      	movs	r2, #132	@ 0x84
 80039c8:	2100      	movs	r1, #0
 80039ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039cc:	f7fd fb56 	bl	800107c <HAL_GetTick>
 80039d0:	0003      	movs	r3, r0
 80039d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2208      	movs	r2, #8
 80039dc:	4013      	ands	r3, r2
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d12c      	bne.n	8003a3c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039e4:	2280      	movs	r2, #128	@ 0x80
 80039e6:	0391      	lsls	r1, r2, #14
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4a46      	ldr	r2, [pc, #280]	@ (8003b04 <UART_CheckIdleState+0x148>)
 80039ec:	9200      	str	r2, [sp, #0]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f000 f88c 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 80039f4:	1e03      	subs	r3, r0, #0
 80039f6:	d021      	beq.n	8003a3c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f8:	f3ef 8310 	mrs	r3, PRIMASK
 80039fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a02:	2301      	movs	r3, #1
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a08:	f383 8810 	msr	PRIMASK, r3
}
 8003a0c:	46c0      	nop			@ (mov r8, r8)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2180      	movs	r1, #128	@ 0x80
 8003a1a:	438a      	bics	r2, r1
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a24:	f383 8810 	msr	PRIMASK, r3
}
 8003a28:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2278      	movs	r2, #120	@ 0x78
 8003a34:	2100      	movs	r1, #0
 8003a36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e05f      	b.n	8003afc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2204      	movs	r2, #4
 8003a44:	4013      	ands	r3, r2
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d146      	bne.n	8003ad8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a4c:	2280      	movs	r2, #128	@ 0x80
 8003a4e:	03d1      	lsls	r1, r2, #15
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4a2c      	ldr	r2, [pc, #176]	@ (8003b04 <UART_CheckIdleState+0x148>)
 8003a54:	9200      	str	r2, [sp, #0]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f000 f858 	bl	8003b0c <UART_WaitOnFlagUntilTimeout>
 8003a5c:	1e03      	subs	r3, r0, #0
 8003a5e:	d03b      	beq.n	8003ad8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a60:	f3ef 8310 	mrs	r3, PRIMASK
 8003a64:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a66:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a68:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f383 8810 	msr	PRIMASK, r3
}
 8003a74:	46c0      	nop			@ (mov r8, r8)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4921      	ldr	r1, [pc, #132]	@ (8003b08 <UART_CheckIdleState+0x14c>)
 8003a82:	400a      	ands	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	f383 8810 	msr	PRIMASK, r3
}
 8003a90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a92:	f3ef 8310 	mrs	r3, PRIMASK
 8003a96:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a98:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f383 8810 	msr	PRIMASK, r3
}
 8003aa6:	46c0      	nop			@ (mov r8, r8)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	438a      	bics	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	f383 8810 	msr	PRIMASK, r3
}
 8003ac2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2280      	movs	r2, #128	@ 0x80
 8003ac8:	2120      	movs	r1, #32
 8003aca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2278      	movs	r2, #120	@ 0x78
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e011      	b.n	8003afc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2280      	movs	r2, #128	@ 0x80
 8003ae2:	2120      	movs	r1, #32
 8003ae4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2278      	movs	r2, #120	@ 0x78
 8003af6:	2100      	movs	r1, #0
 8003af8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	0018      	movs	r0, r3
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b010      	add	sp, #64	@ 0x40
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	01ffffff 	.word	0x01ffffff
 8003b08:	fffffedf 	.word	0xfffffedf

08003b0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	603b      	str	r3, [r7, #0]
 8003b18:	1dfb      	adds	r3, r7, #7
 8003b1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1c:	e051      	b.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	3301      	adds	r3, #1
 8003b22:	d04e      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b24:	f7fd faaa 	bl	800107c <HAL_GetTick>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d302      	bcc.n	8003b3a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d101      	bne.n	8003b3e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e051      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2204      	movs	r2, #4
 8003b46:	4013      	ands	r3, r2
 8003b48:	d03b      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b80      	cmp	r3, #128	@ 0x80
 8003b4e:	d038      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b40      	cmp	r3, #64	@ 0x40
 8003b54:	d035      	beq.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	4013      	ands	r3, r2
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d111      	bne.n	8003b88 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2208      	movs	r2, #8
 8003b6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 f83c 	bl	8003bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2284      	movs	r2, #132	@ 0x84
 8003b78:	2108      	movs	r1, #8
 8003b7a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2278      	movs	r2, #120	@ 0x78
 8003b80:	2100      	movs	r1, #0
 8003b82:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e02c      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	2380      	movs	r3, #128	@ 0x80
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	401a      	ands	r2, r3
 8003b94:	2380      	movs	r3, #128	@ 0x80
 8003b96:	011b      	lsls	r3, r3, #4
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d112      	bne.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2280      	movs	r2, #128	@ 0x80
 8003ba2:	0112      	lsls	r2, r2, #4
 8003ba4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	0018      	movs	r0, r3
 8003baa:	f000 f81f 	bl	8003bec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2284      	movs	r2, #132	@ 0x84
 8003bb2:	2120      	movs	r1, #32
 8003bb4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2278      	movs	r2, #120	@ 0x78
 8003bba:	2100      	movs	r1, #0
 8003bbc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e00f      	b.n	8003be2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	425a      	negs	r2, r3
 8003bd2:	4153      	adcs	r3, r2
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	001a      	movs	r2, r3
 8003bd8:	1dfb      	adds	r3, r7, #7
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d09e      	beq.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	0018      	movs	r0, r3
 8003be4:	46bd      	mov	sp, r7
 8003be6:	b004      	add	sp, #16
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08e      	sub	sp, #56	@ 0x38
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf8:	617b      	str	r3, [r7, #20]
  return(result);
 8003bfa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bfe:	2301      	movs	r3, #1
 8003c00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	f383 8810 	msr	PRIMASK, r3
}
 8003c08:	46c0      	nop			@ (mov r8, r8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4926      	ldr	r1, [pc, #152]	@ (8003cb0 <UART_EndRxTransfer+0xc4>)
 8003c16:	400a      	ands	r2, r1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c26:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2a:	623b      	str	r3, [r7, #32]
  return(result);
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c30:	2301      	movs	r3, #1
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	f383 8810 	msr	PRIMASK, r3
}
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2101      	movs	r1, #1
 8003c48:	438a      	bics	r2, r1
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d118      	bne.n	8003c92 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c60:	f3ef 8310 	mrs	r3, PRIMASK
 8003c64:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c66:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f383 8810 	msr	PRIMASK, r3
}
 8003c74:	46c0      	nop			@ (mov r8, r8)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2110      	movs	r1, #16
 8003c82:	438a      	bics	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f383 8810 	msr	PRIMASK, r3
}
 8003c90:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2280      	movs	r2, #128	@ 0x80
 8003c96:	2120      	movs	r1, #32
 8003c98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b00e      	add	sp, #56	@ 0x38
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			@ (mov r8, r8)
 8003cb0:	fffffedf 	.word	0xfffffedf

08003cb4 <memset>:
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	1882      	adds	r2, r0, r2
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d100      	bne.n	8003cbe <memset+0xa>
 8003cbc:	4770      	bx	lr
 8003cbe:	7019      	strb	r1, [r3, #0]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	e7f9      	b.n	8003cb8 <memset+0x4>

08003cc4 <__libc_init_array>:
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	2600      	movs	r6, #0
 8003cc8:	4c0c      	ldr	r4, [pc, #48]	@ (8003cfc <__libc_init_array+0x38>)
 8003cca:	4d0d      	ldr	r5, [pc, #52]	@ (8003d00 <__libc_init_array+0x3c>)
 8003ccc:	1b64      	subs	r4, r4, r5
 8003cce:	10a4      	asrs	r4, r4, #2
 8003cd0:	42a6      	cmp	r6, r4
 8003cd2:	d109      	bne.n	8003ce8 <__libc_init_array+0x24>
 8003cd4:	2600      	movs	r6, #0
 8003cd6:	f000 f819 	bl	8003d0c <_init>
 8003cda:	4c0a      	ldr	r4, [pc, #40]	@ (8003d04 <__libc_init_array+0x40>)
 8003cdc:	4d0a      	ldr	r5, [pc, #40]	@ (8003d08 <__libc_init_array+0x44>)
 8003cde:	1b64      	subs	r4, r4, r5
 8003ce0:	10a4      	asrs	r4, r4, #2
 8003ce2:	42a6      	cmp	r6, r4
 8003ce4:	d105      	bne.n	8003cf2 <__libc_init_array+0x2e>
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
 8003ce8:	00b3      	lsls	r3, r6, #2
 8003cea:	58eb      	ldr	r3, [r5, r3]
 8003cec:	4798      	blx	r3
 8003cee:	3601      	adds	r6, #1
 8003cf0:	e7ee      	b.n	8003cd0 <__libc_init_array+0xc>
 8003cf2:	00b3      	lsls	r3, r6, #2
 8003cf4:	58eb      	ldr	r3, [r5, r3]
 8003cf6:	4798      	blx	r3
 8003cf8:	3601      	adds	r6, #1
 8003cfa:	e7f2      	b.n	8003ce2 <__libc_init_array+0x1e>
 8003cfc:	08003d98 	.word	0x08003d98
 8003d00:	08003d98 	.word	0x08003d98
 8003d04:	08003d9c 	.word	0x08003d9c
 8003d08:	08003d98 	.word	0x08003d98

08003d0c <_init>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr

08003d18 <_fini>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1e:	bc08      	pop	{r3}
 8003d20:	469e      	mov	lr, r3
 8003d22:	4770      	bx	lr
